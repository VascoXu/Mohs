{"version":3,"sources":["Components/Login/SmashLab.png","Components/helpers.js","history.js","Components/Login/Login.js","Components/Audio/Audio.js","Components/Questions/Questions.js","Components/audio.js","Components/Procedure_V2/Procedure.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","voices","history","playSound","sound","toLowerCase","includes","replace","window","speechSynthesis","cancel","msg","SpeechSynthesisUtterance","undefined","onvoiceschanged","voice","rate","speak","log","action","startTime","foldername","fetch","method","body","JSON","stringify","headers","then","response","json","data","console","logData","abs_timestamp","getCurrentTime","rel_timestamp","timeDiff","Date","secs","hours","Math","floor","minutes","seconds","formatSeconds","round","getTimeElapsed","getTodaysDate","today","day","getDate","month","getMonth","year","getFullYear","time","toLocaleString","timeZone","slice","lastIndexOf","substring","length","getVoices","Login","props","handleChange","event","userEnum","target","value","setState","name","parse","localStorage","getItem","econsent","state","econsented","handleExperimenterConsent","handleParticipantConsent","pconsent","experimenterReady","enums","enum","push","setItem","eready","etime","participantReady","pnum","date","ptime","result","filename","edit","expButton","partButton","this","trim","id","onClick","className","type","src","SmashLab","alt","onChange","placeholder","required","autoFocus","checked","Component","Audio","width","height","viewBox","fill","xmlns","recording","d","fillRule","Questions","index","items","questions","handleClick","question","procedure","step","answer","handleUnanswerable","reminder","setEditMode","map","i","key","bind","aria-hidden","mediaRecorder","chunks","startAudioRecording","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","start","ondataavailable","e","startRecording","catch","err","stopAudioRecording","stop","onstop","blob","Blob","fd","FormData","append","stopRecording","Procedure","inputChange","procedureClick","started","updateStep","expnum","isRecording","export","setTimeout","url","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","startProcedure","updateStartTime","play","ended","Home","getProcedure","incrementStep","location","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.01972180.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SmashLab.17d6023a.png\";","// Wait for voices to load\nvar voices;\nwindow.speechSynthesis.onvoiceschanged = function() {\n  voices = window.speechSynthesis.getVoices();\n};\n\nexport function insertToDatabase(db, table, data) {\n  var transaction = db.transaction([table], \"readwrite\");\n\n  transaction.oncomplete = function(event) {\n    console.log(\"All done!\");\n  };\n\n  transaction.onerror = function(event) {\n    // Generic error handler for all errors targeted at this database's request\n    console.error(\"Database error: \" + event.target.errorCode);    \n  };\n\n  var objectStore = transaction.objectStore(table);\n  var request = objectStore.add(data);\n  request.onsuccess = function(event) {\n  }\n}\n\nexport function databaseGetAll(db) {\n  var transaction = db.transaction('log', 'readonly');\n  var objectStore = transaction.objectStore('log');\n  objectStore.getAll().onsuccess = function(event) {\n    return event.target.result\n  };\n}\n\nexport function playSound(sound) {\n  // Hard-code phonetics\n  sound = sound.toLowerCase();\n  if (sound.includes(\"vaseline\")) {\n    sound = sound.replace(\"vaseline\", \"vaselleen\");\n  }\n  if (sound.includes(\"wound\")) {\n    sound = sound.replace(\"wound\", \"woond\");\n  }\n\n  window.speechSynthesis.cancel();\n\n  var msg = new SpeechSynthesisUtterance(sound);\n\n  if (typeof speechSynthesis !== 'undefined' && speechSynthesis.onvoiceschanged !== undefined) {\n    msg.voice = voices[49]; // \"Google US English\"\n    msg.rate = 0.75;\n    window.speechSynthesis.speak(msg);\n  }\n}\n\nexport function playBeep() {\n  var beep = new Audio(\"beep.mp3\");\n  beep.play();\n}\n\nexport function logData(log) {\n  // Send log to server\n  fetch('/api/log', {\n    method: 'POST',\n    body: JSON.stringify(log),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n  })\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n  });\n}\n\nexport function log(action, startTime, foldername) {\n  // Log action to database\n  var abs_timestamp = getCurrentTime();\n  var rel_timestamp = (startTime === \"start\") ? \"00:00:00\" : getTimeElapsed(startTime);\n  var data = {foldername: foldername, abs_timestamp: abs_timestamp, rel_timestamp: rel_timestamp, action: action};\n  logData(data);\n}\n\nexport function formatSeconds(secs) {\n  var hours   = Math.floor(secs / 3600);\n  var minutes = Math.floor((secs - (hours * 3600)) / 60);\n  var seconds = secs - (hours * 3600) - (minutes * 60);\n\n  if (hours   < 10) {hours   = \"0\"+hours;}\n  if (minutes < 10) {minutes = \"0\"+minutes;}\n  if (seconds < 10) {seconds = \"0\"+seconds;}\n  return (hours+':'+minutes+':'+seconds);\n}\n\nexport function getTimeElapsed(startTime) {\n  var endTime = new Date();\n  var timeDiff = endTime - startTime;\n  timeDiff /= 1000;\n\n  return formatSeconds(Math.round(timeDiff));\n}\n\nexport function getTodaysDate() {\n  var today = new Date();\n  var day = today.getDate();\n  var month = (today.getMonth() < 10) ? `0${today.getMonth() + 1}` : (today.getMonth() + 1);\n  var year = today.getFullYear();\n  var date = `${month}${day}${year}`;\n  return date;\n}\n\nexport function getCurrentTime() {\n  var time = new Date().toLocaleString(\"en-US\", {timeZone: \"America/New_York\"});\n  time = time.slice(time.lastIndexOf(',') + 2);;\n  time = time.substring(0, time.length - 3);\n  return time;\n}","import { createBrowserHistory as history} from 'history';\n\nexport default history();","import React, { Component } from 'react';\nimport SmashLab from './SmashLab.png'\nimport './Login.css';\nimport history from '../../history';\nimport { getCurrentTime, getTodaysDate } from \"../helpers\";\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pnum: \"\",\n      enum: \"\",\n      etime: \"\",\n      filename: \"\",\n      eready: false,\n      econsent: false,\n      econsented: false,\n      pconsent: false,\n      edit: false\n    };\n  }\n\n  handleChange = (event) => {\n    const userEnum = event.target.value;\n    this.setState({\n      [event.target.name]: userEnum\n    });\n    \n    // Lookup Experimenter in LocalStorage\n    if (event.target.name === \"enum\") {\n      var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n      if (enums.includes(event.target.value)) {\n        this.setState({\n          econsent: true\n        })\n      }\n      else if (!this.state.econsented) {\n        this.setState({\n          econsent: false\n        })\n      }\n    }\n  }\n\n  // Handle Experimenter checkbox\n  handleExperimenterConsent = () => {\n    this.setState({\n      econsent: !this.state.econsent,\n      econsented: true\n    });\n  }\n\n  // Handle Participant checkbox\n  handleParticipantConsent = () => {\n    this.setState({\n      pconsent: !this.state.pconsent,\n    });\n  }\n\n  experimenterReady = () => {\n    // Insert enum into LocalStorage\n    var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n    if (!enums.includes(this.state.enum)) {\n      enums.push(this.state.enum);\n      localStorage.setItem(\"enums\", JSON.stringify(enums));\n    }\n      \n    this.setState ({\n      eready: true,\n      etime: getCurrentTime()\n    });\n  }\n\n  participantReady = () => {\n    // Store current Participant Number in LocalStorage\n    localStorage.setItem(\"currentPnum\", this.state.pnum);\n\n    // Store current Experimenter Number in LocalStorage\n    localStorage.setItem(\"currentEnum\", this.state.enum);\n\n    // Deteremine filename\n    var date = getTodaysDate();\n    var time = getCurrentTime().replace(/:/g, '');\n    var foldername = `${date}_${time}_${this.state.enum}_${this.state.pnum}`;\n\n    history.push('/Home', {pnum: this.state.pnum, foldername: foldername});\n\n    // Inform the server about the Participant Number\n    fetch('/api/pnum', {\n      method: 'POST',\n      body: JSON.stringify({\n        foldername: foldername,\n        pnum: this.state.pnum,\n        etime: this.state.etime,\n        ptime: getCurrentTime()\n      }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n\n  render() {\n\n    const isValidLogin = !(this.state.pnum.trim() === \"\" || this.state.enum.trim() === \"\" || !this.state.econsent || !this.state.pconsent);\n    let expButton, partButton;\n    if (isValidLogin) {\n      expButton = <button id=\"eready\" onClick={this.experimenterReady} className=\"btn btn-lg btn-primary btn-block\">Experimenter Ready</button>;\n    }\n    else {\n      expButton = \"\";\n    }\n\n    if (this.state.eready) {\n      partButton = <button id=\"pready\" onClick={this.participantReady} className=\"btn btn-lg btn-info btn-block\" type=\"submit\">Participant Ready</button>;\n    }\n    else {\n      partButton = \"\";\n    }\n\n    return (\n      <div className=\"login text-center\">\n        <div className=\"form-signin\">\n          <img className=\"mb-4 smash_logo\" src={SmashLab} alt=\"Smash Lab\" />\n          <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\n\n          {/* Experimenter Input Group */}\n          <div className=\"input-group mb-2\">\n            <input onChange={this.handleChange} type=\"text\" name=\"enum\" id=\"inputEnum\" className=\"form-control\" placeholder=\"Experimenter number\" value={this.state.enum} required autoFocus />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleExperimenterConsent} type=\"checkbox\" value=\"econsent\" checked={this.state.econsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {/* Participant Input Group */}\n          <div className=\"input-group mb-3\">\n            <input onChange={this.handleChange} type=\"text\" name=\"pnum\" id=\"inputPnum\" className=\"form-control\" placeholder=\"Participant Number\" value={this.state.pnum} required />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleParticipantConsent} type=\"checkbox\" value=\"pconsent\" checked={this.state.pconsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {expButton}\n          {partButton}\n        </div>\n      </div>\n     );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Audio.css\";\n\nclass Audio extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"bottom-right mr-3 mb-3\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-xs-6\">\n              <button className=\"btn btn-light\">\n                <svg className=\"bi bi-mic-fill\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill={this.props.recording ? \"green\" : \"currentColor\"} d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\"/>\n                  <path fillRule=\"evenodd\" d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"/>\n                </svg>\n              </button>\n            </div>\n            {/* <div className=\"col-xs-6 ml-3\">\n              <canvas className=\"visualizer\"></canvas>\n            </div> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Audio;","import React, { Component } from \"react\";\nimport Audio from \"../Audio/Audio\"\nimport \"../../App.css\";\nimport \"./Questions.css\";\n\nimport { getCurrentTime, getTimeElapsed, playSound, logData, log } from \"../helpers\";\n\n\nclass Questions extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      edit: false\n    };\n  }\n\n  handleChange = (index, event) => {\n    // Update questions\n    let items = [...this.state.questions];\n    items[index] = event.target.value;\n\n    this.setState({\n      questions: items\n    });\n  }\n\n  handleClick = (index, event) => {\n    var question = this.props.procedure[this.props.step].questions[index][0];\n    var answer = this.props.procedure[this.props.step].questions[index][1];\n\n    // Insert data to database (i.e. log data)\n    var action = `P${this.props.step + 1}Q${index + 1}: ${question}`;\n    log(action, this.props.startTime, this.props.foldername);\n\n    // Play sound of answer\n    playSound(answer);\n  }\n\n  handleUnanswerable = () => {\n    // Insert data to database (i.e. log data)\n    var action = `P${this.props.step + 1}Q: Unanswerable`;\n    log(action, this.props.startTime, this.props.foldername);\n  }\n\n  reminder = () => {\n    // Remind user to vocalize their actions\n    playSound(\"Please remember to describe what you are doing as you perform each step.\");\n\n    // Log reminder clicked\n    var action = \"Reminder clicked.\";\n    log(action, this.props.startTime, this.props.foldername);\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  render() {\n\n    // Wait for procedure to load\n    var procedure = [];\n    if (this.props.procedure.length > 0 && this.props.step >= 0) {\n      procedure = this.props.procedure[this.props.step].questions.slice(0, 4);\n    }\n\n    return (\n      <div className=\"container full-height mt-2\">\n        <h2 className=\"text-center\">Questions</h2>\n        <hr/>\n\n        {/* Questions */}\n        <div className=\"list-group\">\n          {procedure.map((step, i) =>\n            <button key={i} onClick={this.handleClick.bind(this, i)} type=\"button\" className={`btn btn-light btn-block question ${(this.props.step < 0) ? 'none' : ''}`}>Q{i + 1}: {step[0]}</button>\n          )}\n          <button onClick={this.handleUnanswerable} type=\"button\" className={`btn btn-light btn-block question ${(this.props.step < 0) ? 'none' : ''}`}>Unanswerable</button>\n        </div>\n        \n        {/* Reminder Button */}\n        <div className=\"container text-center mt-5\">\n          <button type=\"button\" onClick={this.reminder} className=\"btn shadow ml-3 btn-dark btn-lg light-border\">\n            <i className=\"fa fa-bell\" aria-hidden=\"true\"></i>\n            <span className=\"ml-2\">Reminder</span>\n          </button>\n        </div>\n\n        {/* Audio Icon */}\n        <Audio recording={(this.props.step >= 0 && this.props.step < this.props.procedure.length - 1)}></Audio>\n        \n        {/* <div className=\"bottom-right\">\n          <span><b>Experimenter #: </b>{localStorage.getItem(\"currentEnum\")}</span>\n          <br/>\n          <span><b>Participant #: </b>{localStorage.getItem(\"currentPnum\")}</span>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default Questions;","var mediaRecorder = {};\nvar chunks = [];\n\nexport function startAudioRecording() {\n  // Ensure getUserMedia is supported\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n    navigator.mediaDevices.getUserMedia (\n      {\n        audio: true\n      })\n\n      // Success callback, start recording\n      .then((stream) => startRecording(stream))\n\n      // Error callback\n      .catch(function(err) {\n        console.log('The following getUserMedia error occured: ' + err);\n      }\n    );\n  } else {\n    console.log('getUserMedia not supported on your browser!');\n  }\n}\n\nfunction startRecording(stream) {\n  // Start recording\n  mediaRecorder = new MediaRecorder(stream);\n  mediaRecorder.start(10);\n\n  // Start visualizing audio\n  // visualize(stream);\n\n  console.log(\"recorder started\");\n\n  mediaRecorder.ondataavailable = function(e) {\n    chunks.push(e.data);\n  }\n}\n\nexport function stopAudioRecording(filename, foldername) {\n  // Stop recording\n  mediaRecorder.stop();\n  console.log(mediaRecorder.state);\n  console.log(\"recorder stopped\");\n  mediaRecorder.onstop = (e) => stopRecording(e, filename, foldername);\n}\n\nfunction stopRecording(e, filename, foldername) {\n  // Stop and save the recording\n  console.log(\"recorder onstopped\");\n  const blob = new Blob(chunks, { 'type' : 'audio/wav; codecs=0' });\n  \n  // Package the data\n  var fd = new FormData();\n  fd.append(\"filename\", filename);\n  fd.append(\"foldername\", foldername);\n  fd.append(\"pnum\", localStorage.getItem(\"currentPnum\"));\n  fd.append(\"audio\", blob);\n\n  // Send audio blob to server\n  fetch('/api/audio', {\n    method: 'POST',\n    body: fd,\n  })\n  .then(response => response.json())\n  .then(result => {\n    // Print result\n    console.log(result);\n  });\n\n  /*\n  // Format data to send to server (using base64 encoding)\n  var reader = new FileReader();\n  reader.readAsDataURL(blob);\n  reader.onload = function(event) {\n    var base64AudioMessage = event.target.result.split(',')[1];\n\n    // Send audio blob to server\n    fetch('/api/audio', {\n      method: 'POST',\n      body: JSON.stringify({\n        filename: 'hello.wav',\n        audiostring: base64AudioMessage\n      }),\n      headers: new Headers({ 'content-type': 'application/json' })\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n  */\n\n  chunks = [];\n\n  /*\n  const clipName = prompt('Enter a name for your sound clip');\n\n  const clipContainer = document.createElement('article');\n  const clipLabel = document.createElement('p');\n  const audio = document.createElement('audio');\n  const deleteButton = document.createElement('button');\n    \n  const soundClips = document.querySelector('.sound-clips');    \n\n  clipContainer.classList.add('clip');\n  audio.setAttribute('controls', '');\n  deleteButton.innerHTML = \"Delete\";\n  clipLabel.innerHTML = clipName;\n\n  clipContainer.appendChild(audio);\n  clipContainer.appendChild(clipLabel);\n  clipContainer.appendChild(deleteButton);\n  soundClips.appendChild(clipContainer);\n\n  audio.controls = true;\n  const blob = new Blob(chunks, { 'type' : 'audio/wav;' });\n  \n  chunks = [];\n  const audioURL = window.URL.createObjectURL(blob);\n  audio.src = audioURL;\n\n  deleteButton.onclick = function(e) {\n    let evtTgt = e.target;\n    evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n  }\n  */\n}\n\nfunction visualize(stream) {\n  // Visualize audio stream\n  const canvas = document.querySelector('.visualizer');\n  const canvasCtx = canvas.getContext(\"2d\");\n  let audioCtx;\n\n  if(!audioCtx) {\n    audioCtx = new AudioContext();\n  }\n\n  const source = audioCtx.createMediaStreamSource(stream);\n\n  const analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 2048;\n  const bufferLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n\n  source.connect(analyser);\n  //analyser.connect(audioCtx.destination);\n\n  draw()\n\n  function draw() {\n    const WIDTH = canvas.width\n    const HEIGHT = canvas.height;\n\n    requestAnimationFrame(draw);\n\n    analyser.getByteTimeDomainData(dataArray);\n\n    canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n\n    canvasCtx.beginPath();\n\n    let sliceWidth = WIDTH * 1.0 / bufferLength;\n    let x = 0;\n\n\n    for(let i = 0; i < bufferLength; i++) {\n\n      let v = dataArray[i] / 128.0;\n      let y = v * HEIGHT/2;\n\n      if(i === 0) {\n        canvasCtx.moveTo(x, y);\n      } else {\n        canvasCtx.lineTo(x, y);\n      }\n\n      x += sliceWidth;\n    }\n\n    canvasCtx.lineTo(canvas.width, canvas.height/2);\n    canvasCtx.stroke();\n\n  }\n}\n\n  // Convert an AudioBuffer to a Blob using WAVE representation\n  // https://www.russellgood.com/how-to-convert-audiobuffer-to-audio-file/\n  function bufferToWave(abuffer, len) {\n    var numOfChan = abuffer.numberOfChannels,\n        length = len * numOfChan * 2 + 44,\n        buffer = new ArrayBuffer(length),\n        view = new DataView(buffer),\n        channels = [], i, sample,\n        offset = 0,\n        pos = 0;\n\n    // write WAVE header\n    setUint32(0x46464952);                         // \"RIFF\"\n    setUint32(length - 8);                         // file length - 8\n    setUint32(0x45564157);                         // \"WAVE\"\n\n    setUint32(0x20746d66);                         // \"fmt \" chunk\n    setUint32(16);                                 // length = 16\n    setUint16(1);                                  // PCM (uncompressed)\n    setUint16(numOfChan);\n    setUint32(abuffer.sampleRate);\n    setUint32(abuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\n    setUint16(numOfChan * 2);                      // block-align\n    setUint16(16);                                 // 16-bit (hardcoded in this demo)\n\n    setUint32(0x61746164);                         // \"data\" - chunk\n    setUint32(length - pos - 4);                   // chunk length\n\n    // write interleaved data\n    for(i = 0; i < abuffer.numberOfChannels; i++)\n    channels.push(abuffer.getChannelData(i));\n\n    while(pos < length) {\n    for(i = 0; i < numOfChan; i++) {             // interleave channels\n        sample = Math.max(-1, Math.min(1, channels[i][offset])); // clamp\n        sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767)|0; // scale to 16-bit signed int\n        view.setInt16(pos, sample, true);          // write 16-bit sample\n        pos += 2;\n    }\n    offset++                                     // next source sample\n    }\n\n    // create Blob\n    return new Blob([buffer], {type: \"audio/wav\"});\n\n    function setUint16(data) {\n    view.setUint16(pos, data, true);\n    pos += 2;\n    }\n\n    function setUint32(data) {\n    view.setUint32(pos, data, true);\n    pos += 4;\n    }\n}\n","import React, { Component } from \"react\";\nimport Audio from \"../Audio/Audio\"\nimport \"../../App.css\";\nimport \"./Procedure.css\";\nimport { getCurrentTime, getTodaysDate, playSound, logData, log, playBeep } from \"../helpers\";\nimport { startAudioRecording, stopAudioRecording } from \"../audio\";\n\nclass Procedure extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      ended: false,\n      edit: false,\n      isRecording: false,\n      index: 0\n    };\n  }\n\n  inputChange = (index, event) => {\n    // Update procedure\n    let items = [...this.props.procedure];\n    items[index] = event.target.value;\n\n    this.setState({\n      procedure: items\n    });\n  }\n\n  procedureClick = (index, event) => {\n    // Ensure procedure has started\n    if (!this.state.started) {\n      return;\n    }\n\n    // Update step\n    this.props.updateStep(index);\n\n    // Insert data to database (i.e log data)\n    let action = `P${index + 1}: ${this.props.procedure[index].procedure}`;\n    log(action, this.props.startTime, this.props.foldername);\n\n    // Play sound\n    playSound(this.props.procedure[index].procedure);\n\n    // Stop recording\n    if (this.state.started) {\n      // Determine filename\n      var date = getTodaysDate();\n      var time = getCurrentTime().replace(/:/g, '');;\n      var expnum = localStorage.getItem(\"currentEnum\");\n      var pnum = localStorage.getItem(\"currentPnum\");\n\n      var filename = `${date}_${time}_${expnum}_${pnum}-${this.state.index}`;\n      stopAudioRecording(filename, this.props.foldername);\n\n      this.setState({\n        isRecording: false\n      });\n    }\n\n    if (index < this.props.procedure.length) {\n      startAudioRecording();\n      this.setState({\n        isRecording: true\n      });\n    }\n    else {\n      // Log end to database\n      let action = \"Procedure ended.\";\n      log(action, this.props.startTime, this.props.foldername);\n    }\n\n    // Increment index\n    this.setState({\n      index: this.state.index + 1\n    });\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  export = () => {\n    if (this.state.isRecording) {\n      // Determine filename\n      var date = getTodaysDate();\n      var time = getCurrentTime().replace(/:/g, '');;\n      var expnum = localStorage.getItem(\"currentEnum\");\n      var pnum = localStorage.getItem(\"currentPnum\");\n\n      var filename = `${date}_${time}_${expnum}_${pnum}-${this.state.index}`;\n      stopAudioRecording(filename, this.props.foldername);\n      \n      // Log end to database\n      let action = \"Procedure ended.\";\n      log(action, this.props.startTime, this.props.foldername);\n\n      this.setState({\n        isRecording: false\n      })\n    }\n\n    // Wait 1 second before export\n    setTimeout( () => {\n      // Export data\n      fetch('/api/export', {\n        method: 'POST',\n        body: JSON.stringify({\n          foldername: this.props.foldername,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n      .then(response => response.blob())\n      .then(blob => {\n        // Download Zip file\n        var url = window.URL.createObjectURL(blob);\n        var a = document.createElement('a');\n        a.href = url;\n        a.download = `${this.props.foldername}.zip`;\n        document.body.appendChild(a); \n        a.click();    \n        a.remove();  \n      });\n\n      // User must restart to use the app again\n      this.setState({\n        started: false\n      });\n    }, 1000);\n  }\n\n  startProcedure = () => {\n    this.setState({\n      started: true\n    })\n\n    // Start recording\n    startAudioRecording();\n\n    // Log start to database\n    let action = \"Procedure started.\";\n    log(action, \"start\", this.props.foldername);\n\n    // Update start time\n    let startTime = new Date();\n    this.props.updateStartTime(startTime);\n\n    // Update step\n    this.props.updateStep(0);\n    \n    // Play initial beep sound\n    playBeep();\n\n    // Wait 2 seconds before playing procedure audio \n    setTimeout( () => {\n      // Insert data to database (i.e log data)\n      action = `P${this.props.step + 1}: ${this.props.procedure[this.props.step].procedure}`;\n      log(action, this.props.startTime, this.props.foldername);\n\n      // Play procedure step\n      playSound(this.props.procedure[0].procedure);\n\n    }, 2000);\n  }\n  \n  render() {\n    return (\n      <div className=\"full-height mt-2\">\n        <h2 className=\"text-white text-center\">Procedure</h2>\n        <hr/>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <ul className=\"list-group list-group-hover mt-2 mb-5 procedure-list\">\n                <li onClick={this.startProcedure} id='start' className={`list-group-item`}>Click <b>here</b> to begin the procedure recording. </li>\n                {this.props.procedure.map((step, i) => \n                  <li key={i} \n                      onClick={this.procedureClick.bind(this, i)} \n                      id={'l' + i} \n                      className={`list-group-item ${(this.props.step === i && this.state.started) ? 'active' : ''} ${(!this.state.started) ? 'list-group-item-secondary disabled' : ''}`}>\n                        {step.procedure}\n                  </li>\n                )}\n                <li onClick={this.export} id='start' \n                    className={`list-group-item ${(!this.state.started) ? 'list-group-item-secondary disabled' : ''}`}>\n                      Click <b>here</b> to end procedure recording and download data. \n                </li>\n              </ul>            \n            </div>\n          </div>\n        </div>\n        <Audio recording={this.state.started}></Audio>\n      </div>\n    );\n  }\n}\n\nexport default Procedure;","import React, { Component } from \"react\";\nimport Questions from '../Questions/Questions'\nimport Procedure from '../Procedure_V2/Procedure'\nimport './Home.css';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      procedure: [],\n      startTime: 0,\n      step: -1\n    }\n  }\n\n  getProcedure = () => {\n    // Get a list of procedures\n    fetch('/api/procedure')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        procedure: data\n      });\n    })\n  }\n\n  updateStartTime = (startTime) => {\n    this.setState({\n      startTime: startTime\n    });\n  }\n\n  updateStep = (step) => {\n    this.setState({\n      step: step\n    });\n  }\n\n  incrementStep = () => {\n    this.setState({\n      step: (this.state.step + 1) % this.state.procedure.length\n    });\n  }\n\n  componentDidMount() {\n    // Get procedure\n    this.getProcedure();\n  }\n\n  render() {    \n    return (\n      <div>\n        {/* Left pane (Procedure section) */}\n        <div className=\"bg-dark split left\">\n          <div>\n            <Procedure incrementStep={this.incrementStep} \n                        updateStep={this.updateStep}\n                        step={this.state.step} \n                        updateStartTime={this.updateStartTime}\n                        startTime={this.state.startTime}\n                        procedure={this.state.procedure} \n                        foldername={this.props.location.state.foldername}>\n            </Procedure>\n          </div>\n        </div>\n\n        {/* Right pane (Questions sections) */}\n        <div className=\"bg-light split right\">\n          <div>\n            <Questions incrementStep={this.incrementStep} \n                        updateStep={this.updateStep}\n                        step={this.state.step} \n                        updateStartTime={this.updateStartTime}\n                        startTime={this.state.startTime}\n                        procedure={this.state.procedure}\n                        foldername={this.props.location.state.foldername}>\n            </Questions>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport Login from './Components/Login/Login'\nimport Home from './Components/Home/Home'\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './history';\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/Home\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}