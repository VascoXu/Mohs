{"version":3,"sources":["Components/Login/SmashLab.png","history.js","Components/helpers.js","Components/Login/Login.js","Components/Audio/Audio.js","Components/Questions/Questions.js","Components/audio.js","Components/Procedure_V2/Procedure.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","history","playSound","sound","toLowerCase","includes","replace","window","speechSynthesis","cancel","msg","SpeechSynthesisUtterance","rate","speak","log","action","startTime","abs_timestamp","getCurrentTime","rel_timestamp","timeDiff","Date","secs","hours","Math","floor","minutes","seconds","formatSeconds","round","getTimeElapsed","fetch","method","body","JSON","stringify","headers","then","response","json","data","console","logData","pnum","localStorage","getItem","getTodaysDate","today","day","getDate","month","getMonth","year","getFullYear","time","toLocaleString","timeZone","slice","lastIndexOf","substring","length","Login","props","handleChange","event","userEnum","target","value","setState","name","parse","econsent","state","econsented","handleExperimenterConsent","handleParticipantConsent","pconsent","experimenterReady","enums","enum","push","setItem","eready","etime","participantReady","date","filename","ptime","result","edit","expButton","partButton","this","trim","id","onClick","className","type","src","SmashLab","alt","onChange","placeholder","required","autoFocus","checked","Component","Audio","width","height","viewBox","fill","xmlns","recording","d","fillRule","Questions","index","items","questions","handleClick","question","procedure","step","reminder","setEditMode","map","i","key","bind","aria-hidden","mediaRecorder","chunks","startAudioRecording","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","start","ondataavailable","e","startRecording","catch","err","stopAudioRecording","stop","onstop","blob","Blob","fd","FormData","append","stopRecording","Procedure","inputChange","procedureClick","started","updateStep","expnum","export","url","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","startProcedure","updateStartTime","ended","Home","getProcedure","incrementStep","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,sC,4SCE5BC,gBCwBR,SAASC,EAAUC,IAExBA,EAAQA,EAAMC,eACJC,SAAS,cACjBF,EAAQA,EAAMG,QAAQ,WAAY,cAEhCH,EAAME,SAAS,WACjBF,EAAQA,EAAMG,QAAQ,QAAS,UAGjCC,OAAOC,gBAAgBC,SACvB,IAAIC,EAAM,IAAIC,yBAAyBR,GACvCO,EAAIE,KAAO,IACXL,OAAOC,gBAAgBK,MAAMH,GAmBxB,SAASI,EAAIC,EAAQC,GAE1B,IAAIC,EAAgBC,IAChBC,EAA+B,UAAdH,EAAyB,WAiBzC,SAAwBA,GAC7B,IACII,EADU,IAAIC,KACOL,EAGzB,OAFAI,GAAY,IAdP,SAAuBE,GAC5B,IAAIC,EAAUC,KAAKC,MAAMH,EAAO,MAC5BI,EAAUF,KAAKC,OAAOH,EAAgB,KAARC,GAAiB,IAC/CI,EAAUL,EAAgB,KAARC,EAA2B,GAAVG,EAEnCH,EAAU,KAAKA,EAAU,IAAIA,GAC7BG,EAAU,KAAKA,EAAU,IAAIA,GAC7BC,EAAU,KAAKA,EAAU,IAAIA,GACjC,OAAQJ,EAAM,IAAIG,EAAQ,IAAIC,EAQvBC,CAAcJ,KAAKK,MAAMT,IAtB2BU,CAAed,IAnBrE,SAAiBF,GAEtBiB,MAAM,WAAY,CAChBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUrB,GACrBsB,QAAS,CACP,OAAU,mBACV,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQ3B,IAAI0B,MAUdE,CADW,CAACC,KADDC,aAAaC,QAAQ,eACR5B,cAAeA,EAAeE,cAAeA,EAAeJ,OAAQA,IAuBvF,SAAS+B,IACd,IAAIC,EAAQ,IAAI1B,KACZ2B,EAAMD,EAAME,UACZC,EAASH,EAAMI,WAAa,GAApB,WAA8BJ,EAAMI,WAAa,GAAOJ,EAAMI,WAAa,EACnFC,EAAOL,EAAMM,cAEjB,MADQ,UAAMH,GAAN,OAAcF,GAAd,OAAoBI,GAIvB,SAASlC,IACd,IAAIoC,GAAO,IAAIjC,MAAOkC,eAAe,QAAS,CAACC,SAAU,qBAGzD,OADAF,GADAA,EAAOA,EAAKG,MAAMH,EAAKI,YAAY,KAAO,IAC9BC,UAAU,EAAGL,EAAKM,OAAS,G,IC8D1BC,E,kDAxJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,aAAe,SAACC,GACd,IAAMC,EAAWD,EAAME,OAAOC,OAC9B,EAAKC,SAAL,eACGJ,EAAME,OAAOG,KAAOJ,IAIG,SAAtBD,EAAME,OAAOG,QACHnC,KAAKoC,MAAM1B,aAAaC,QAAQ,UAAY,MAC9CxC,SAAS2D,EAAME,OAAOC,OAC9B,EAAKC,SAAS,CACZG,UAAU,IAGJ,EAAKC,MAAMC,YACnB,EAAKL,SAAS,CACZG,UAAU,MA9BC,EAqCnBG,0BAA4B,WAC1B,EAAKN,SAAS,CACZG,UAAW,EAAKC,MAAMD,SACtBE,YAAY,KAxCG,EA6CnBE,yBAA2B,WACzB,EAAKP,SAAS,CACZQ,UAAW,EAAKJ,MAAMI,YA/CP,EAmDnBC,kBAAoB,WAElB,IAAIC,EAAQ5C,KAAKoC,MAAM1B,aAAaC,QAAQ,UAAY,MACnDiC,EAAMzE,SAAS,EAAKmE,MAAMO,QAC7BD,EAAME,KAAK,EAAKR,MAAMO,MACtBnC,aAAaqC,QAAQ,QAAS/C,KAAKC,UAAU2C,KAG/C,EAAKV,SAAU,CACbc,QAAQ,EACRC,MAAOjE,OA7DQ,EAiEnBkE,iBAAmB,WACjBnF,EAAQ+E,KAAK,QAAS,CAACrC,KAAM,EAAK6B,MAAM7B,OAGxCC,aAAaqC,QAAQ,cAAe,EAAKT,MAAM7B,MAG/CC,aAAaqC,QAAQ,cAAe,EAAKT,MAAMO,MAG/C,IAAIM,EAAOvC,IACPQ,EAAOpC,IAAiBZ,QAAQ,KAAM,IACtCgF,EAAQ,UAAMD,EAAN,YAAc/B,EAAd,YAAsB,EAAKkB,MAAMO,KAAjC,YAAyC,EAAKP,MAAM7B,MAGhEZ,MAAM,YAAa,CACjBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBmD,SAAUA,EACV3C,KAAM,EAAK6B,MAAM7B,KACjBwC,MAAO,EAAKX,MAAMW,MAClBI,MAAOrE,MAETkB,QAAS,CACP,OAAU,mBACV,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAmD,GAEJ/C,QAAQ3B,IAAI0E,OA9Fd,EAAKhB,MAAQ,CACX7B,KAAM,GACNoC,KAAM,GACNI,MAAO,GACPD,QAAQ,EACRX,UAAU,EACVE,YAAY,EACZG,UAAU,EACVa,MAAM,GAVS,E,qDAsGjB,IACIC,EAAWC,EAef,OAbED,IAHgD,KAA3BE,KAAKpB,MAAM7B,KAAKkD,QAA4C,KAA3BD,KAAKpB,MAAMO,KAAKc,SAAkBD,KAAKpB,MAAMD,WAAaqB,KAAKpB,MAAMI,UAG/G,4BAAQkB,GAAG,SAASC,QAASH,KAAKf,kBAAmBmB,UAAU,oCAA/D,sBAGA,GAIZL,EADEC,KAAKpB,MAAMU,OACA,4BAAQY,GAAG,SAASC,QAASH,KAAKR,iBAAkBY,UAAU,gCAAgCC,KAAK,UAAnG,qBAGA,GAIb,yBAAKD,UAAU,qBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,kBAAkBE,IAAKC,IAAUC,IAAI,cACpD,wBAAIJ,UAAU,8BAAd,kBAGA,yBAAKA,UAAU,oBACb,2BAAOK,SAAUT,KAAK7B,aAAckC,KAAK,OAAO5B,KAAK,OAAOyB,GAAG,YAAYE,UAAU,eAAeM,YAAY,sBAAsBnC,MAAOyB,KAAKpB,MAAMO,KAAMwB,UAAQ,EAACC,WAAS,IAChL,yBAAKR,UAAU,sBACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,OAAOK,SAAUT,KAAKlB,0BAA2BuB,KAAK,WAAW9B,MAAM,WAAWsC,QAASb,KAAKpB,MAAMD,WADzH,cAOJ,yBAAKyB,UAAU,oBACb,2BAAOK,SAAUT,KAAK7B,aAAckC,KAAK,OAAO5B,KAAK,OAAOyB,GAAG,YAAYE,UAAU,eAAeM,YAAY,qBAAqBnC,MAAOyB,KAAKpB,MAAM7B,KAAM4D,UAAQ,IACrK,yBAAKP,UAAU,sBACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,OAAOK,SAAUT,KAAKjB,yBAA0BsB,KAAK,WAAW9B,MAAM,WAAWsC,QAASb,KAAKpB,MAAMI,WADxH,cAMHc,EACAC,Q,GAnJSe,a,QC4BLC,G,6DA5Bb,WAAY7C,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKkC,UAAU,0BACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,4BAAQA,UAAU,iBAChB,yBAAKA,UAAU,iBAAiBY,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,eAAeC,MAAM,8BACrG,0BAAMD,KAAMnB,KAAK9B,MAAMmD,UAAY,QAAU,eAAgBC,EAAE,0CAC/D,0BAAMC,SAAS,UAAUD,EAAE,8K,GAfzBR,cC2FLU,G,wDArFb,WAAYtD,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,aAAe,SAACsD,EAAOrD,GAErB,IAAIsD,EAAK,YAAO,EAAK9C,MAAM+C,WAC3BD,EAAMD,GAASrD,EAAME,OAAOC,MAE5B,EAAKC,SAAS,CACZmD,UAAWD,KAbI,EAiBnBE,YAAc,SAACH,EAAOrD,GACpB,IAAIyD,EAAW,EAAK3D,MAAM4D,UAAU,EAAK5D,MAAM6D,MAAMJ,UAAUF,GAAO,GAItEnH,EAHa,EAAK4D,MAAM4D,UAAU,EAAK5D,MAAM6D,MAAMJ,UAAUF,GAAO,IAOpEvG,EADU,WAAO,EAAKgD,MAAM6D,KAAlB,YAA0BN,EAAQ,EAAlC,aAAwCI,GACtC,EAAK3D,MAAM9C,YA1BN,EA6BnB4G,SAAW,WAET1H,EAAU,4EAIVY,EADa,oBACD,EAAKgD,MAAM9C,YAnCN,EAsCnB6G,YAAc,WACZ,EAAKzD,SAAS,CACZqB,MAAM,KAtCR,EAAKjB,MAAQ,CACXiB,MAAM,GAHS,E,qDA4CT,IAAD,OAGHiC,EAAY,GAKhB,OAJI9B,KAAK9B,MAAM4D,UAAU9D,OAAS,GAAKgC,KAAK9B,MAAM6D,MAAQ,IACxDD,EAAY9B,KAAK9B,MAAM4D,UAAU9B,KAAK9B,MAAM6D,MAAMJ,UAAU9D,MAAM,EAAG,IAIrE,yBAAKuC,UAAU,8BACb,wBAAIA,UAAU,eAAd,aACA,6BAGA,yBAAKA,UAAU,cACZ0B,EAAUI,KAAI,SAACH,EAAMI,GAAP,OACb,4BAAQC,IAAKD,EAAGhC,QAAS,EAAKyB,YAAYS,KAAK,EAAMF,GAAI9B,KAAK,SAASD,UAAS,2CAAuC,EAAKlC,MAAM6D,KAAO,EAAK,OAAS,KAAvJ,IAA+JI,EAAI,EAAnK,KAAwKJ,EAAK,QAKjL,yBAAK3B,UAAU,8BACb,4BAAQC,KAAK,SAASF,QAASH,KAAKgC,SAAU5B,UAAU,gDACtD,uBAAGA,UAAU,aAAakC,cAAY,SACtC,0BAAMlC,UAAU,QAAhB,cAKJ,kBAAC,EAAD,CAAOiB,UAAYrB,KAAK9B,MAAM6D,MAAQ,GAAK/B,KAAK9B,MAAM6D,KAAO/B,KAAK9B,MAAM4D,UAAU9D,OAAS,S,GA3E3E8C,cCRpByB,G,MAAgB,IAChBC,EAAS,GAEN,SAASC,IAEVC,UAAUC,cAAgBD,UAAUC,aAAaC,cACnD/F,QAAQ3B,IAAI,2BACZwH,UAAUC,aAAaC,aACrB,CACEC,OAAO,IAIRpG,MAAK,SAACqG,GAAD,OAYZ,SAAwBA,IAEtBP,EAAgB,IAAIQ,cAAcD,IACpBE,MAAM,IAKpBnG,QAAQ3B,IAAI,oBAEZqH,EAAcU,gBAAkB,SAASC,GACvCV,EAAOpD,KAAK8D,EAAEtG,OAvBMuG,CAAeL,MAGhCM,OAAM,SAASC,GACdxG,QAAQ3B,IAAI,6CAA+CmI,OAI/DxG,QAAQ3B,IAAI,+CAmBT,SAASoI,EAAmB5D,GAEjC6C,EAAcgB,OACd1G,QAAQ3B,IAAIqH,EAAc3D,OAC1B/B,QAAQ3B,IAAI,oBACZqH,EAAciB,OAAS,SAACN,GAAD,OAGzB,SAAuBA,EAAGxD,GAExB7C,QAAQ3B,IAAI,sBACZ,IAAMuI,EAAO,IAAIC,KAAKlB,EAAQ,CAAE,KAAS,wBAGrCmB,EAAK,IAAIC,SACbD,EAAGE,OAAO,WAAYnE,GACtBiE,EAAGE,OAAO,OAAQ7G,aAAaC,QAAQ,gBACvC0G,EAAGE,OAAO,QAASJ,GAGnBtH,MAAM,aAAc,CAClBC,OAAQ,OACRC,KAAMsH,IAEPlH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAmD,GAEJ/C,QAAQ3B,IAAI0E,MA2Bd4C,EAAS,GAjDqBsB,CAAcZ,EAAGxD,I,ICoHlCqE,E,kDAxJb,WAAY7F,GAAQ,IAAD,8BACjB,cAAMA,IASR8F,YAAc,SAACvC,EAAOrD,GAEpB,IAAIsD,EAAK,YAAO,EAAKxD,MAAM4D,WAC3BJ,EAAMD,GAASrD,EAAME,OAAOC,MAE5B,EAAKC,SAAS,CACZsD,UAAWJ,KAhBI,EAoBnBuC,eAAiB,SAACxC,EAAOrD,GAEvB,GAAK,EAAKQ,MAAMsF,QAAhB,CAeA,GAVA,EAAKhG,MAAMiG,WAAW1C,GAGtBnH,EAAU,EAAK4D,MAAM4D,UAAUL,GAAOK,WAItC5G,EADU,WAAOuG,EAAQ,EAAf,aAAqB,EAAKvD,MAAM4D,UAAUL,GAAOK,WAC/C,EAAK5D,MAAM9C,WAGnB,EAAKwD,MAAMsF,QAAS,CAEtB,IAAIzE,EAAOvC,IACPQ,EAAOpC,IAAiBZ,QAAQ,KAAM,IACtC0J,EAASpH,aAAaC,QAAQ,eAC9BF,EAAOC,aAAaC,QAAQ,eAGhCqG,EADY,UAAM7D,EAAN,YAAc/B,EAAd,YAAsB0G,EAAtB,YAAgCrH,EAAhC,YAAwC,EAAK6B,MAAM6C,QAI7DA,EAAQ,EAAKvD,MAAM4D,UAAU9D,OAAS,GACxCyE,IAIF,EAAKjE,SAAS,CACZiD,MAAO,EAAK7C,MAAM6C,MAAQ,MAtDX,EA0DnBQ,YAAc,WACZ,EAAKzD,SAAS,CACZqB,MAAM,KA5DS,EAgEnBwE,OAAS,WAEPlI,MAAM,cAAe,CACnBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBQ,KAAMC,aAAaC,QAAQ,iBAE7BT,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAAS+G,UAC1BhH,MAAK,SAAAgH,GAEJ,IAAIa,EAAM3J,OAAO4J,IAAIC,gBAAgBf,GACjCgB,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,KAAON,EACTG,EAAEI,SAAF,UAAgB7H,aAAaC,QAAQ,eAArC,QACAyH,SAASrI,KAAKyI,YAAYL,GAC1BA,EAAEM,QACFN,EAAEO,YAIJ,EAAKxG,SAAS,CACZ0F,SAAS,KAzFM,EA6FnBe,eAAiB,WACf,EAAKzG,SAAS,CACZ0F,SAAS,IAIX,EAAKhG,MAAMiG,WAAW,GAGtB7J,EAAU,EAAK4D,MAAM4D,UAAU,GAAGA,WAGlC,IAAI3G,EAAS,qBACbD,EAAIC,EAAQ,SAGZ,IAAIC,EAAY,IAAIK,KACpB,EAAKyC,MAAMgH,gBAAgB9J,GAI3BF,EADAC,EAAM,WAAO,EAAK+C,MAAM6D,KAAO,EAAzB,aAA+B,EAAK7D,MAAM4D,UAAU,EAAK5D,MAAM6D,KAAO,GAAGD,WACnE,SAGZW,KAnHA,EAAK7D,MAAQ,CACXsF,SAAS,EACTiB,OAAO,EACPtF,MAAM,EACN4B,MAAO,GANQ,E,qDAwHT,IAAD,OACP,OACE,yBAAKrB,UAAU,oBACb,wBAAIA,UAAU,0BAAd,aACA,6BACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,wDACZ,wBAAID,QAASH,KAAKiF,eAAgB/E,GAAG,QAAQE,UAAS,mBAAtD,SAAiF,mCAAjF,uCACCJ,KAAK9B,MAAM4D,UAAUI,KAAI,SAACH,EAAMI,GAAP,OACxB,wBAAIC,IAAKD,EACLhC,QAAS,EAAK8D,eAAe5B,KAAK,EAAMF,GACxCjC,GAAI,IAAMiC,EACV/B,UAAS,0BAAsB,EAAKlC,MAAM6D,OAASI,GAAK,EAAKvD,MAAMsF,QAAW,SAAW,GAAhF,YAAwF,EAAKtF,MAAMsF,QAAkD,GAAvC,uCACpHnC,EAAKD,cAGd,wBAAI3B,QAASH,KAAKqE,OAAQnE,GAAG,QACzBE,UAAS,0BAAuBJ,KAAKpB,MAAMsF,QAAkD,GAAvC,uCAD1D,SAEY,mCAFZ,sDAQR,kBAAC,EAAD,CAAO7C,UAAWrB,KAAKpB,MAAMsF,e,GApJbpD,aC8ETsE,G,wDA9Eb,WAAYlH,GAAQ,IAAD,8BACjB,cAAMA,IAQRmH,aAAe,WAEblJ,MAAM,kBACLM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAK4B,SAAS,CACZsD,UAAWlF,QAfE,EAoBnBsI,gBAAkB,SAAC9J,GACjB,EAAKoD,SAAS,CACZpD,UAAWA,KAtBI,EA0BnB+I,WAAa,SAACpC,GACZ,EAAKvD,SAAS,CACZuD,KAAMA,KA5BS,EAgCnBuD,cAAgB,WACd,EAAK9G,SAAS,CACZuD,MAAO,EAAKnD,MAAMmD,KAAO,GAAK,EAAKnD,MAAMkD,UAAU9D,UAhCrD,EAAKY,MAAQ,CACXkD,UAAW,GACX1G,UAAW,EACX2G,MAAO,GALQ,E,gEAwCjB/B,KAAKqF,iB,+BAIL,OACE,6BAEE,yBAAKjF,UAAU,sBACb,6BACE,kBAAC,EAAD,CAAWkF,cAAetF,KAAKsF,cACnBnB,WAAYnE,KAAKmE,WACjBpC,KAAM/B,KAAKpB,MAAMmD,KACjBmD,gBAAiBlF,KAAKkF,gBACtB9J,UAAW4E,KAAKpB,MAAMxD,UACtB0G,UAAW9B,KAAKpB,MAAMkD,UACtB/E,KAAMiD,KAAK9B,MAAMnB,SAMjC,yBAAKqD,UAAU,wBACb,6BACE,kBAAC,EAAD,CAAWkF,cAAetF,KAAKsF,cACnBnB,WAAYnE,KAAKmE,WACjBpC,KAAM/B,KAAKpB,MAAMmD,KACjBmD,gBAAiBlF,KAAKkF,gBACtB9J,UAAW4E,KAAKpB,MAAMxD,UACtB0G,UAAW9B,KAAKpB,MAAMkD,UACtB/E,KAAMiD,KAAK9B,MAAMnB,c,GAvEtB+D,c,QCoBJyE,E,kDAhBb,WAAYrH,GAAQ,uCACZA,G,qDAIN,OACE,kBAAC,IAAD,CAAQ7D,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmL,KAAK,IAAIC,OAAK,EAACC,UAAWzH,IACjC,kBAAC,IAAD,CAAOuH,KAAK,QAAQE,UAAWN,U,GAXvBtE,aCKE6E,QACW,cAA7BhL,OAAOiL,SAASC,UAEe,UAA7BlL,OAAOiL,SAASC,UAEhBlL,OAAOiL,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDwHpB,kBAAmBxD,WACrBA,UAAUyD,cAAcC,MACrB3J,MAAK,SAAA4J,GACJA,EAAaC,gBAEdlD,OAAM,SAAAmD,GACL1J,QAAQ0J,MAAMA,EAAMC,c","file":"static/js/main.d2c7d8a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SmashLab.17d6023a.png\";","import { createBrowserHistory as history} from 'history';\n\nexport default history();","export function insertToDatabase(db, table, data) {\n  var transaction = db.transaction([table], \"readwrite\");\n\n  transaction.oncomplete = function(event) {\n    console.log(\"All done!\");\n  };\n\n  transaction.onerror = function(event) {\n    // Generic error handler for all errors targeted at this database's request\n    console.error(\"Database error: \" + event.target.errorCode);    \n  };\n\n  var objectStore = transaction.objectStore(table);\n  var request = objectStore.add(data);\n  request.onsuccess = function(event) {\n  }\n}\n\nexport function databaseGetAll(db) {\n  var transaction = db.transaction('log', 'readonly');\n  var objectStore = transaction.objectStore('log');\n  objectStore.getAll().onsuccess = function(event) {\n    return event.target.result\n  };\n}\n\nexport function playSound(sound) {\n  // Hard-code phonetics\n  sound = sound.toLowerCase();\n  if (sound.includes(\"vaseline\")) {\n    sound = sound.replace(\"vaseline\", \"vaselleen\");\n  }\n  if (sound.includes(\"wound\")) {\n    sound = sound.replace(\"wound\", \"woond\");\n  }\n\n  window.speechSynthesis.cancel();\n  var msg = new SpeechSynthesisUtterance(sound);\n  msg.rate = 0.75;\n  window.speechSynthesis.speak(msg);\n}\n\nexport function logData(log) {\n  // Send log to server\n  fetch('/api/log', {\n    method: 'POST',\n    body: JSON.stringify(log),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n  })\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n  });\n}\n\nexport function log(action, startTime) {\n  // Log action to database\n  var abs_timestamp = getCurrentTime();\n  var rel_timestamp = (startTime === \"start\") ? \"00:00:00\" : getTimeElapsed(startTime);\n  var pnum = localStorage.getItem(\"currentPnum\");\n  var data = {pnum: pnum, abs_timestamp: abs_timestamp, rel_timestamp: rel_timestamp, action: action};\n  logData(data);\n}\n\nexport function formatSeconds(secs) {\n  var hours   = Math.floor(secs / 3600);\n  var minutes = Math.floor((secs - (hours * 3600)) / 60);\n  var seconds = secs - (hours * 3600) - (minutes * 60);\n\n  if (hours   < 10) {hours   = \"0\"+hours;}\n  if (minutes < 10) {minutes = \"0\"+minutes;}\n  if (seconds < 10) {seconds = \"0\"+seconds;}\n  return (hours+':'+minutes+':'+seconds);\n}\n\nexport function getTimeElapsed(startTime) {\n  var endTime = new Date();\n  var timeDiff = endTime - startTime;\n  timeDiff /= 1000;\n\n  return formatSeconds(Math.round(timeDiff));\n}\n\nexport function getTodaysDate() {\n  var today = new Date();\n  var day = today.getDate();\n  var month = (today.getMonth() < 10) ? `0${today.getMonth() + 1}` : (today.getMonth() + 1);\n  var year = today.getFullYear();\n  var date = `${month}${day}${year}`;\n  return date;\n}\n\nexport function getCurrentTime() {\n  var time = new Date().toLocaleString(\"en-US\", {timeZone: \"America/New_York\"});\n  time = time.slice(time.lastIndexOf(',') + 2);;\n  time = time.substring(0, time.length - 3);\n  return time;\n}","import React, { Component } from 'react';\nimport SmashLab from './SmashLab.png'\nimport './Login.css';\nimport history from '../../history';\nimport { getCurrentTime, getTodaysDate } from \"../helpers\";\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pnum: \"\",\n      enum: \"\",\n      etime: \"\",\n      eready: false,\n      econsent: false,\n      econsented: false,\n      pconsent: false,\n      edit: false\n    };\n  }\n\n  handleChange = (event) => {\n    const userEnum = event.target.value;\n    this.setState({\n      [event.target.name]: userEnum\n    });\n    \n    // Lookup Experimenter in LocalStorage\n    if (event.target.name === \"enum\") {\n      var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n      if (enums.includes(event.target.value)) {\n        this.setState({\n          econsent: true\n        })\n      }\n      else if (!this.state.econsented) {\n        this.setState({\n          econsent: false\n        })\n      }\n    }\n  }\n\n  // Handle Experimenter checkbox\n  handleExperimenterConsent = () => {\n    this.setState({\n      econsent: !this.state.econsent,\n      econsented: true\n    });\n  }\n\n  // Handle Participant checkbox\n  handleParticipantConsent = () => {\n    this.setState({\n      pconsent: !this.state.pconsent,\n    });\n  }\n\n  experimenterReady = () => {\n    // Insert enum into LocalStorage\n    var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n    if (!enums.includes(this.state.enum)) {\n      enums.push(this.state.enum);\n      localStorage.setItem(\"enums\", JSON.stringify(enums));\n    }\n      \n    this.setState ({\n      eready: true,\n      etime: getCurrentTime()\n    });\n  }\n\n  participantReady = () => {\n    history.push('/Home', {pnum: this.state.pnum});\n\n    // Store current Participant Number in LocalStorage\n    localStorage.setItem(\"currentPnum\", this.state.pnum);\n\n    // Store current Experimenter Number in LocalStorage\n    localStorage.setItem(\"currentEnum\", this.state.enum);\n\n    // Deteremine filename\n    var date = getTodaysDate();\n    var time = getCurrentTime().replace(/:/g, '');;\n    var filename = `${date}_${time}_${this.state.enum}_${this.state.pnum}`;\n\n    // Inform the server about the Participant Number\n    fetch('/api/pnum', {\n      method: 'POST',\n      body: JSON.stringify({\n        filename: filename,\n        pnum: this.state.pnum,\n        etime: this.state.etime,\n        ptime: getCurrentTime()\n      }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n\n  render() {\n\n    const isValidLogin = !(this.state.pnum.trim() === \"\" || this.state.enum.trim() === \"\" || !this.state.econsent || !this.state.pconsent);\n    let expButton, partButton;\n    if (isValidLogin) {\n      expButton = <button id=\"eready\" onClick={this.experimenterReady} className=\"btn btn-lg btn-primary btn-block\">Experimenter Ready</button>;\n    }\n    else {\n      expButton = \"\";\n    }\n\n    if (this.state.eready) {\n      partButton = <button id=\"pready\" onClick={this.participantReady} className=\"btn btn-lg btn-info btn-block\" type=\"submit\">Participant Ready</button>;\n    }\n    else {\n      partButton = \"\";\n    }\n\n    return (\n      <div className=\"login text-center\">\n        <div className=\"form-signin\">\n          <img className=\"mb-4 smash_logo\" src={SmashLab} alt=\"Smash Lab\" />\n          <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\n\n          {/* Experimenter Input Group */}\n          <div className=\"input-group mb-2\">\n            <input onChange={this.handleChange} type=\"text\" name=\"enum\" id=\"inputEnum\" className=\"form-control\" placeholder=\"Experimenter number\" value={this.state.enum} required autoFocus />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleExperimenterConsent} type=\"checkbox\" value=\"econsent\" checked={this.state.econsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {/* Participant Input Group */}\n          <div className=\"input-group mb-3\">\n            <input onChange={this.handleChange} type=\"text\" name=\"pnum\" id=\"inputPnum\" className=\"form-control\" placeholder=\"Participant Number\" value={this.state.pnum} required />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleParticipantConsent} type=\"checkbox\" value=\"pconsent\" checked={this.state.pconsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {expButton}\n          {partButton}\n        </div>\n      </div>\n     );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Audio.css\";\n\nclass Audio extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"bottom-right mr-3 mb-3\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-xs-6\">\n              <button className=\"btn btn-light\">\n                <svg className=\"bi bi-mic-fill\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill={this.props.recording ? \"green\" : \"currentColor\"} d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\"/>\n                  <path fillRule=\"evenodd\" d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"/>\n                </svg>\n              </button>\n            </div>\n            {/* <div className=\"col-xs-6 ml-3\">\n              <canvas className=\"visualizer\"></canvas>\n            </div> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Audio;","import React, { Component } from \"react\";\nimport Audio from \"../Audio/Audio\"\nimport \"../../App.css\";\nimport \"./Questions.css\";\n\nimport { getCurrentTime, getTimeElapsed, playSound, logData, log } from \"../helpers\";\n\n\nclass Questions extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      edit: false\n    };\n  }\n\n  handleChange = (index, event) => {\n    // Update questions\n    let items = [...this.state.questions];\n    items[index] = event.target.value;\n\n    this.setState({\n      questions: items\n    });\n  }\n\n  handleClick = (index, event) => {\n    var question = this.props.procedure[this.props.step].questions[index][0];\n    var answer = this.props.procedure[this.props.step].questions[index][1];\n\n    // Play sound of answer\n    playSound(answer);\n\n    // Insert data to database (i.e. log data)\n    var action = `P${this.props.step}Q${index + 1}: ${question}`;\n    log(action, this.props.startTime);\n  }\n\n  reminder = () => {\n    // Remind user to vocalize their actions\n    playSound(\"Please remember to describe what you are doing as you perform each step.\");\n\n    // Log reminder clicked\n    var action = \"Reminder clicked.\";\n    log(action, this.props.startTime);\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  render() {\n\n    // Wait for procedure to load\n    var procedure = [];\n    if (this.props.procedure.length > 0 && this.props.step >= 0) {\n      procedure = this.props.procedure[this.props.step].questions.slice(0, 4);\n    }\n\n    return (\n      <div className=\"container full-height mt-2\">\n        <h2 className=\"text-center\">Questions</h2>\n        <hr/>\n\n        {/* Questions */}\n        <div className=\"list-group\">\n          {procedure.map((step, i) =>\n            <button key={i} onClick={this.handleClick.bind(this, i)} type=\"button\" className={`btn btn-light btn-block question ${(this.props.step < 0) ? 'none' : ''}`}>Q{i + 1}: {step[0]}</button>\n          )}\n        </div>\n        \n        {/* Reminder Button */}\n        <div className=\"container text-center mt-5\">\n          <button type=\"button\" onClick={this.reminder} className=\"btn shadow ml-3 btn-dark btn-lg light-border\">\n            <i className=\"fa fa-bell\" aria-hidden=\"true\"></i>\n            <span className=\"ml-2\">Reminder</span>\n          </button>\n        </div>\n\n        {/* Audio Icon */}\n        <Audio recording={(this.props.step >= 0 && this.props.step < this.props.procedure.length - 1)}></Audio>\n        \n        {/* <div className=\"bottom-right\">\n          <span><b>Experimenter #: </b>{localStorage.getItem(\"currentEnum\")}</span>\n          <br/>\n          <span><b>Participant #: </b>{localStorage.getItem(\"currentPnum\")}</span>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default Questions;","var mediaRecorder = {};\nvar chunks = [];\n\nexport function startAudioRecording() {\n  // Ensure getUserMedia is supported\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n    navigator.mediaDevices.getUserMedia (\n      {\n        audio: true\n      })\n\n      // Success callback, start recording\n      .then((stream) => startRecording(stream))\n\n      // Error callback\n      .catch(function(err) {\n        console.log('The following getUserMedia error occured: ' + err);\n      }\n    );\n  } else {\n    console.log('getUserMedia not supported on your browser!');\n  }\n}\n\nfunction startRecording(stream) {\n  // Start recording\n  mediaRecorder = new MediaRecorder(stream);\n  mediaRecorder.start(10);\n\n  // Start visualizing audio\n  // visualize(stream);\n\n  console.log(\"recorder started\");\n\n  mediaRecorder.ondataavailable = function(e) {\n    chunks.push(e.data);\n  }\n}\n\nexport function stopAudioRecording(filename) {\n  // Stop recording\n  mediaRecorder.stop();\n  console.log(mediaRecorder.state);\n  console.log(\"recorder stopped\");\n  mediaRecorder.onstop = (e) => stopRecording(e, filename);\n}\n\nfunction stopRecording(e, filename) {\n  // Stop and save the recording\n  console.log(\"recorder onstopped\");\n  const blob = new Blob(chunks, { 'type' : 'audio/wav; codecs=0' });\n  \n  // Package the data\n  var fd = new FormData();\n  fd.append(\"filename\", filename)\n  fd.append(\"pnum\", localStorage.getItem(\"currentPnum\"));\n  fd.append(\"audio\", blob);\n\n  // Send audio blob to server\n  fetch('/api/audio', {\n    method: 'POST',\n    body: fd,\n  })\n  .then(response => response.json())\n  .then(result => {\n    // Print result\n    console.log(result);\n  });\n\n  /*\n  // Format data to send to server (using base64 encoding)\n  var reader = new FileReader();\n  reader.readAsDataURL(blob);\n  reader.onload = function(event) {\n    var base64AudioMessage = event.target.result.split(',')[1];\n\n    // Send audio blob to server\n    fetch('/api/audio', {\n      method: 'POST',\n      body: JSON.stringify({\n        filename: 'hello.wav',\n        audiostring: base64AudioMessage\n      }),\n      headers: new Headers({ 'content-type': 'application/json' })\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n  */\n\n  chunks = [];\n\n  /*\n  const clipName = prompt('Enter a name for your sound clip');\n\n  const clipContainer = document.createElement('article');\n  const clipLabel = document.createElement('p');\n  const audio = document.createElement('audio');\n  const deleteButton = document.createElement('button');\n    \n  const soundClips = document.querySelector('.sound-clips');    \n\n  clipContainer.classList.add('clip');\n  audio.setAttribute('controls', '');\n  deleteButton.innerHTML = \"Delete\";\n  clipLabel.innerHTML = clipName;\n\n  clipContainer.appendChild(audio);\n  clipContainer.appendChild(clipLabel);\n  clipContainer.appendChild(deleteButton);\n  soundClips.appendChild(clipContainer);\n\n  audio.controls = true;\n  const blob = new Blob(chunks, { 'type' : 'audio/wav;' });\n  \n  chunks = [];\n  const audioURL = window.URL.createObjectURL(blob);\n  audio.src = audioURL;\n\n  deleteButton.onclick = function(e) {\n    let evtTgt = e.target;\n    evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n  }\n  */\n}\n\nfunction visualize(stream) {\n  // Visualize audio stream\n  const canvas = document.querySelector('.visualizer');\n  const canvasCtx = canvas.getContext(\"2d\");\n  let audioCtx;\n\n  if(!audioCtx) {\n    audioCtx = new AudioContext();\n  }\n\n  const source = audioCtx.createMediaStreamSource(stream);\n\n  const analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 2048;\n  const bufferLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n\n  source.connect(analyser);\n  //analyser.connect(audioCtx.destination);\n\n  draw()\n\n  function draw() {\n    const WIDTH = canvas.width\n    const HEIGHT = canvas.height;\n\n    requestAnimationFrame(draw);\n\n    analyser.getByteTimeDomainData(dataArray);\n\n    canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n\n    canvasCtx.beginPath();\n\n    let sliceWidth = WIDTH * 1.0 / bufferLength;\n    let x = 0;\n\n\n    for(let i = 0; i < bufferLength; i++) {\n\n      let v = dataArray[i] / 128.0;\n      let y = v * HEIGHT/2;\n\n      if(i === 0) {\n        canvasCtx.moveTo(x, y);\n      } else {\n        canvasCtx.lineTo(x, y);\n      }\n\n      x += sliceWidth;\n    }\n\n    canvasCtx.lineTo(canvas.width, canvas.height/2);\n    canvasCtx.stroke();\n\n  }\n}\n\n  // Convert an AudioBuffer to a Blob using WAVE representation\n  // https://www.russellgood.com/how-to-convert-audiobuffer-to-audio-file/\n  function bufferToWave(abuffer, len) {\n    var numOfChan = abuffer.numberOfChannels,\n        length = len * numOfChan * 2 + 44,\n        buffer = new ArrayBuffer(length),\n        view = new DataView(buffer),\n        channels = [], i, sample,\n        offset = 0,\n        pos = 0;\n\n    // write WAVE header\n    setUint32(0x46464952);                         // \"RIFF\"\n    setUint32(length - 8);                         // file length - 8\n    setUint32(0x45564157);                         // \"WAVE\"\n\n    setUint32(0x20746d66);                         // \"fmt \" chunk\n    setUint32(16);                                 // length = 16\n    setUint16(1);                                  // PCM (uncompressed)\n    setUint16(numOfChan);\n    setUint32(abuffer.sampleRate);\n    setUint32(abuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\n    setUint16(numOfChan * 2);                      // block-align\n    setUint16(16);                                 // 16-bit (hardcoded in this demo)\n\n    setUint32(0x61746164);                         // \"data\" - chunk\n    setUint32(length - pos - 4);                   // chunk length\n\n    // write interleaved data\n    for(i = 0; i < abuffer.numberOfChannels; i++)\n    channels.push(abuffer.getChannelData(i));\n\n    while(pos < length) {\n    for(i = 0; i < numOfChan; i++) {             // interleave channels\n        sample = Math.max(-1, Math.min(1, channels[i][offset])); // clamp\n        sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767)|0; // scale to 16-bit signed int\n        view.setInt16(pos, sample, true);          // write 16-bit sample\n        pos += 2;\n    }\n    offset++                                     // next source sample\n    }\n\n    // create Blob\n    return new Blob([buffer], {type: \"audio/wav\"});\n\n    function setUint16(data) {\n    view.setUint16(pos, data, true);\n    pos += 2;\n    }\n\n    function setUint32(data) {\n    view.setUint32(pos, data, true);\n    pos += 4;\n    }\n}\n","import React, { Component } from \"react\";\nimport Audio from \"../Audio/Audio\"\nimport \"../../App.css\";\nimport \"./Procedure.css\";\nimport { getCurrentTime, getTodaysDate, playSound, logData, log } from \"../helpers\";\nimport { startAudioRecording, stopAudioRecording } from \"../audio\";\n\nclass Procedure extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      ended: false,\n      edit: false,\n      index: 0\n    };\n  }\n\n  inputChange = (index, event) => {\n    // Update procedure\n    let items = [...this.props.procedure];\n    items[index] = event.target.value;\n\n    this.setState({\n      procedure: items\n    });\n  }\n\n  procedureClick = (index, event) => {\n    // Ensure procedure has started\n    if (!this.state.started) {\n      return;\n    }\n\n    // Update step\n    this.props.updateStep(index);\n\n    // Play sound\n    playSound(this.props.procedure[index].procedure);\n\n    // Insert data to database (i.e log data)\n    let action = `P${index + 1}: ${this.props.procedure[index].procedure}`;\n    log(action, this.props.startTime);\n\n    // Stop recording\n    if (this.state.started) {\n      // Determine filename\n      var date = getTodaysDate();\n      var time = getCurrentTime().replace(/:/g, '');;\n      var expnum = localStorage.getItem(\"currentEnum\");\n      var pnum = localStorage.getItem(\"currentPnum\");\n\n      var filename = `${date}_${time}_${expnum}_${pnum}-${this.state.index}`;\n      stopAudioRecording(filename);\n    }\n\n    if (index < this.props.procedure.length - 1) {\n      startAudioRecording();\n    }\n\n    // Increment index\n    this.setState({\n      index: this.state.index + 1\n    });\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  export = () => {\n    // Export data\n    fetch('/api/export', {\n      method: 'POST',\n      body: JSON.stringify({\n        pnum: localStorage.getItem('currentPnum')\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.blob())\n    .then(blob => {\n      // Download Zip file\n      var url = window.URL.createObjectURL(blob);\n      var a = document.createElement('a');\n      a.href = url;\n      a.download = `${localStorage.getItem('currentPnum')}.zip`;\n      document.body.appendChild(a); \n      a.click();    \n      a.remove();  \n    });\n\n    // User must restart to use the app again\n    this.setState({\n      started: false\n    });\n  }\n\n  startProcedure = () => {\n    this.setState({\n      started: true\n    })\n\n    // Update step\n    this.props.updateStep(0);\n\n    // Play procedure step\n    playSound(this.props.procedure[0].procedure);\n\n    // Log start to database\n    let action = \"Procedure started.\";\n    log(action, \"start\");\n\n    // Update start time\n    let startTime = new Date();\n    this.props.updateStartTime(startTime);\n\n    // Insert data to database (i.e log data)\n    action = `P${this.props.step + 2}: ${this.props.procedure[this.props.step + 1].procedure}`;\n    log(action, \"start\");\n\n    // Start recording\n    startAudioRecording();\n  }\n  \n  render() {\n    return (\n      <div className=\"full-height mt-2\">\n        <h2 className=\"text-white text-center\">Procedure</h2>\n        <hr/>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <ul className=\"list-group list-group-hover mt-2 mb-5 procedure-list\">\n                <li onClick={this.startProcedure} id='start' className={`list-group-item`}>Click <b>here</b> to begin the procedure recording. </li>\n                {this.props.procedure.map((step, i) => \n                  <li key={i} \n                      onClick={this.procedureClick.bind(this, i)} \n                      id={'l' + i} \n                      className={`list-group-item ${(this.props.step === i && this.state.started) ? 'active' : ''} ${(!this.state.started) ? 'list-group-item-secondary disabled' : ''}`}>\n                        {step.procedure}\n                  </li>\n                )}\n                <li onClick={this.export} id='start' \n                    className={`list-group-item ${(!this.state.started) ? 'list-group-item-secondary disabled' : ''}`}>\n                      Click <b>here</b> to end procedure recording and download data. \n                </li>\n              </ul>            \n            </div>\n          </div>\n        </div>\n        <Audio recording={this.state.started}></Audio>\n      </div>\n    );\n  }\n}\n\nexport default Procedure;","import React, { Component } from \"react\";\nimport Questions from '../Questions/Questions'\nimport Procedure from '../Procedure_V2/Procedure'\nimport './Home.css';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      procedure: [],\n      startTime: 0,\n      step: -1\n    }\n  }\n\n  getProcedure = () => {\n    // Get a list of procedures\n    fetch('/api/procedure')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        procedure: data\n      });\n    })\n  }\n\n  updateStartTime = (startTime) => {\n    this.setState({\n      startTime: startTime\n    });\n  }\n\n  updateStep = (step) => {\n    this.setState({\n      step: step\n    });\n  }\n\n  incrementStep = () => {\n    this.setState({\n      step: (this.state.step + 1) % this.state.procedure.length\n    });\n  }\n\n  componentDidMount() {\n    // Get procedure\n    this.getProcedure();\n  }\n\n  render() {    \n    return (\n      <div>\n        {/* Left pane (Procedure section) */}\n        <div className=\"bg-dark split left\">\n          <div>\n            <Procedure incrementStep={this.incrementStep} \n                        updateStep={this.updateStep}\n                        step={this.state.step} \n                        updateStartTime={this.updateStartTime}\n                        startTime={this.state.startTime}\n                        procedure={this.state.procedure} \n                        pnum={this.props.pnum}>\n            </Procedure>\n          </div>\n        </div>\n\n        {/* Right pane (Questions sections) */}\n        <div className=\"bg-light split right\">\n          <div>\n            <Questions incrementStep={this.incrementStep} \n                        updateStep={this.updateStep}\n                        step={this.state.step} \n                        updateStartTime={this.updateStartTime}\n                        startTime={this.state.startTime}\n                        procedure={this.state.procedure} \n                        pnum={this.props.pnum}>\n            </Questions>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport Login from './Components/Login/Login'\nimport Home from './Components/Home/Home'\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './history';\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/Home\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}