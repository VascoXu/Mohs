{"version":3,"sources":["Components/Login/SmashLab.png","history.js","Components/Login/Login.js","Components/helpers.js","Components/Questions/Questions.js","Components/Audio/Audio.js","Components/audio.js","Components/Procedure/Procedure.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","history","Login","props","handleChange","event","userEnum","target","value","setState","name","JSON","parse","localStorage","getItem","includes","econsent","state","econsented","handleExperimenterConsent","handleParticipantConsent","pconsent","experimenterReady","enums","enum","push","setItem","stringify","eready","participantReady","pnum","fetch","method","body","headers","then","response","json","result","console","log","edit","expButton","partButton","this","trim","id","onClick","className","type","src","SmashLab","alt","onChange","placeholder","required","autoFocus","checked","Component","playSound","sound","window","speechSynthesis","cancel","msg","SpeechSynthesisUtterance","speak","logData","data","getCurrentTime","Date","toLocaleString","timeZone","substr","Questions","index","items","questions","handleClick","question","procedure","step","timeElapsed","timestamp","action","export","blob","url","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","setEditMode","length","slice","map","i","key","bind","recordTime","width","height","viewBox","fill","xmlns","d","aria-hidden","Audio","recording","fillRule","mediaRecorder","chunks","startAudioRecording","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","start","ondataavailable","e","startRecording","catch","err","stopAudioRecording","filename","stop","onstop","Blob","fd","FormData","append","stopRecording","Procedure","inputChange","procedureClick","updateStep","done","started","incrementStep","repeat","Home","getProcedure","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,sC,4SCE5BC,gBCgJAC,E,kDA3Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,aAAe,SAACC,GACd,IAAMC,EAAWD,EAAME,OAAOC,OAC9B,EAAKC,SAAL,eACGJ,EAAME,OAAOG,KAAOJ,IAIG,SAAtBD,EAAME,OAAOG,QACHC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAC9CC,SAASV,EAAME,OAAOC,OAC9B,EAAKC,SAAS,CACZO,UAAU,IAGJ,EAAKC,MAAMC,YACnB,EAAKT,SAAS,CACZO,UAAU,MA7BC,EAoCnBG,0BAA4B,WAC1B,EAAKV,SAAS,CACZO,UAAW,EAAKC,MAAMD,SACtBE,YAAY,KAvCG,EA4CnBE,yBAA2B,WACzB,EAAKX,SAAS,CACZY,UAAW,EAAKJ,MAAMI,YA9CP,EAkDnBC,kBAAoB,WAElB,IAAIC,EAAQZ,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MACnDS,EAAMR,SAAS,EAAKE,MAAMO,QAC7BD,EAAME,KAAK,EAAKR,MAAMO,MACtBX,aAAaa,QAAQ,QAASf,KAAKgB,UAAUJ,KAG/C,EAAKd,SAAU,CACbmB,QAAQ,KA3DO,EA+DnBC,iBAAmB,WACjB5B,EAAQwB,KAAK,QAAS,CAACK,KAAM,EAAKb,MAAMa,OAGxCjB,aAAaa,QAAQ,cAAe,EAAKT,MAAMa,MAG/CC,MAAM,YAAa,CACjBC,OAAQ,OACRC,KAAMtB,KAAKgB,UAAU,CACnBG,KAAM,EAAKb,MAAMa,OAEnBI,QAAS,CACP,OAAU,mBACV,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJC,QAAQC,IAAIF,OAjFd,EAAKrB,MAAQ,CACXa,KAAM,GACNN,KAAM,GACNI,QAAQ,EACRZ,UAAU,EACVE,YAAY,EACZG,UAAU,EACVoB,MAAM,GATS,E,qDAyFjB,IACIC,EAAWC,EAef,OAbED,IAHgD,KAA3BE,KAAK3B,MAAMa,KAAKe,QAA4C,KAA3BD,KAAK3B,MAAMO,KAAKqB,SAAkBD,KAAK3B,MAAMD,WAAa4B,KAAK3B,MAAMI,UAG/G,4BAAQyB,GAAG,SAASC,QAASH,KAAKtB,kBAAmB0B,UAAU,oCAA/D,sBAGA,GAIZL,EADEC,KAAK3B,MAAMW,OACA,4BAAQkB,GAAG,SAASC,QAASH,KAAKf,iBAAkBmB,UAAU,gCAAgCC,KAAK,UAAnG,qBAGA,GAIb,yBAAKD,UAAU,qBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,kBAAkBE,IAAKC,IAAUC,IAAI,cACpD,wBAAIJ,UAAU,8BAAd,kBAGA,yBAAKA,UAAU,oBACb,2BAAOK,SAAUT,KAAKxC,aAAc6C,KAAK,OAAOvC,KAAK,OAAOoC,GAAG,YAAYE,UAAU,eAAeM,YAAY,sBAAsB9C,MAAOoC,KAAK3B,MAAMO,KAAM+B,UAAQ,EAACC,WAAS,IAChL,yBAAKR,UAAU,sBACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,OAAOK,SAAUT,KAAKzB,0BAA2B8B,KAAK,WAAWzC,MAAM,WAAWiD,QAASb,KAAK3B,MAAMD,WADzH,cAOJ,yBAAKgC,UAAU,oBACb,2BAAOK,SAAUT,KAAKxC,aAAc6C,KAAK,OAAOvC,KAAK,OAAOoC,GAAG,YAAYE,UAAU,eAAeM,YAAY,qBAAqB9C,MAAOoC,KAAK3B,MAAMa,KAAMyB,UAAQ,IACrK,yBAAKP,UAAU,sBACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,OAAOK,SAAUT,KAAKxB,yBAA0B6B,KAAK,WAAWzC,MAAM,WAAWiD,QAASb,KAAK3B,MAAMI,WADxH,cAMHqB,EACAC,Q,GAtISe,a,mBCqBb,SAASC,EAAUC,GACxBC,OAAOC,gBAAgBC,SACvB,IAAIC,EAAM,IAAIC,yBAAyBL,GACvCC,OAAOC,gBAAgBI,MAAMF,GAGxB,SAASG,EAAQ3B,GAEpBT,MAAM,WAAY,CAChBC,OAAQ,OACRC,KAAMtB,KAAKgB,UAAUa,GACrBN,QAAS,CACP,OAAU,mBACV,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAiC,GACJ7B,QAAQC,IAAI4B,MAIX,SAASC,IAEd,OADW,IAAIC,MAAOC,eAAe,QAAS,CAACC,SAAU,qBAC7CC,OAAO,GAAI,G,IC0DVC,E,kDAnGb,WAAYvE,GAAQ,IAAD,8BACjB,cAAMA,IAORC,aAAe,SAACuE,EAAOtE,GAErB,IAAIuE,EAAK,YAAO,EAAK3D,MAAM4D,WAC3BD,EAAMD,GAAStE,EAAME,OAAOC,MAE5B,EAAKC,SAAS,CACZoE,UAAWD,KAdI,EAkBnBE,YAAc,SAACH,EAAOtE,GACpB,IAAI0E,EAAW,EAAK5E,MAAM6E,UAAU,EAAK7E,MAAM8E,MAAMJ,UAAUF,GAAO,GAItEhB,EAHa,EAAKxD,MAAM6E,UAAU,EAAK7E,MAAM8E,MAAMJ,UAAUF,GAAO,IAMpE,IAAIO,EAAcb,IAElBF,EADW,CAACrC,KAAMjB,aAAaC,QAAQ,eAAgBqE,UAAWD,EAAaE,OAAO,YAAD,OAAcT,EAAd,aAAwBI,MA3B5F,EA+BnBM,OAAS,WACPtD,MAAM,cAAe,CACnBC,OAAQ,OACRC,KAAMtB,KAAKgB,UAAU,CACnBG,KAAMjB,aAAaC,QAAQ,iBAE7BoB,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASkD,UAC1BnD,MAAK,SAAAmD,GAEJ,IAAIC,EAAM1B,OAAO2B,IAAIC,gBAAgBH,GACjCI,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,KAAON,EACTG,EAAEI,SAAF,UAAgBjF,aAAaC,QAAQ,eAArC,QACA6E,SAAS1D,KAAK8D,YAAYL,GAC1BA,EAAEM,QACFN,EAAEO,aAlDa,EAsDnBC,YAAc,WACZ,EAAKzF,SAAS,CACZgC,MAAM,KAtDR,EAAKxB,MAAQ,CACXgE,KAAM,EACNxC,MAAM,GAJS,E,qDA4DT,IAAD,OAGHuC,EAAY,GAKhB,OAJIpC,KAAKzC,MAAM6E,UAAUmB,OAAS,IAChCnB,EAAYpC,KAAKzC,MAAM6E,UAAUpC,KAAKzC,MAAM8E,MAAMJ,UAAUuB,MAAM,EAAG,IAIrE,yBAAKpD,UAAU,8BACb,wBAAIA,UAAU,eAAd,aACA,6BAGA,yBAAKA,UAAU,cACZgC,EAAUqB,KAAI,SAACpB,EAAMqB,GAAP,OACb,4BAAQC,IAAKD,EAAGvD,QAAS,EAAK+B,YAAY0B,KAAK,EAAMF,GAAIrD,KAAK,SAASD,UAAU,oCAAjF,IAAsHsD,EAAI,EAA1H,KAA+HrB,EAAK,QAKxI,yBAAKjC,UAAU,8BACT,4BAAQC,KAAK,SAASF,QAASH,KAAK6D,WAAYzD,UAAU,gDACxD,yBAAK0D,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAY5D,UAAU,kBAAkB6D,KAAK,eAAeC,MAAM,8BACtG,0BAAMC,EAAE,kKAEV,0BAAM/D,UAAU,QAAhB,cAKR,yBAAKA,UAAU,oBACb,4BAAQD,QAASH,KAAKyC,OAAQrC,UAAU,gBAAe,uBAAGA,UAAU,iBAAiBgE,cAAY,SAAW,0BAAMhE,UAAU,QAAhB,mB,GA9F9FU,aC2BTuD,G,wDA5Bb,WAAY9G,GAAQ,uCACZA,G,qDAIN,OACE,yBAAK6C,UAAU,0BACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,4BAAQA,UAAU,iBAChB,yBAAKA,UAAU,iBAAiB0D,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,eAAeC,MAAM,8BACrG,0BAAMD,KAAMjE,KAAKzC,MAAM+G,UAAY,QAAU,eAAgBH,EAAE,0CAC/D,0BAAMI,SAAS,UAAUJ,EAAE,uKAIjC,yBAAK/D,UAAU,iBACb,4BAAQA,UAAU,uB,GApBZU,cCJhB0D,G,MAAgB,IAChBC,EAAS,GAEN,SAASC,IAEVC,UAAUC,cAAgBD,UAAUC,aAAaC,cACnDlF,QAAQC,IAAI,2BACZ+E,UAAUC,aAAaC,aACrB,CACEC,OAAO,IAIRvF,MAAK,SAACwF,GAAD,OAYZ,SAAwBA,IAEpBP,EAAgB,IAAIQ,cAAcD,IACpBE,MAAM,IAKpBtF,QAAQC,IAAI,oBAEZ4E,EAAcU,gBAAkB,SAASC,GACvCV,EAAO5F,KAAKsG,EAAE3D,OAvBI4D,CAAeL,MAGhCM,OAAM,SAASC,GACd3F,QAAQC,IAAI,6CAA+C0F,OAI/D3F,QAAQC,IAAI,+CAmBT,SAAS2F,EAAmBC,GAEjChB,EAAciB,OACd9F,QAAQC,IAAI4E,EAAcnG,OAC1BsB,QAAQC,IAAI,oBACZ4E,EAAckB,OAAS,SAACP,GAAD,OAGzB,SAAuBA,EAAGK,GAExB7F,QAAQC,IAAI,sBACZ,IAAM8C,EAAO,IAAIiD,KAAKlB,EAAQ,CAAE,KAAS,eAGrCmB,EAAK,IAAIC,SACbD,EAAGE,OAAO,WAAYN,GACtBI,EAAGE,OAAO,OAAQ7H,aAAaC,QAAQ,gBACvC0H,EAAGE,OAAO,QAASpD,GAGnBvD,MAAM,aAAc,CAClBC,OAAQ,OACRC,KAAMuG,IAEPrG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJC,QAAQC,IAAIF,MA2Bd+E,EAAS,GAjDqBsB,CAAcZ,EAAGK,I,ICyElCQ,E,kDA7Gb,WAAYzI,GAAQ,IAAD,8BACjB,cAAMA,IAOR0I,YAAc,SAAClE,EAAOtE,GAEpB,IAAIuE,EAAK,YAAO,EAAKzE,MAAM6E,WAC3BJ,EAAMD,GAAStE,EAAME,OAAOC,MAE5B,EAAKC,SAAS,CACZuE,UAAWJ,KAdI,EAkBnBkE,eAAiB,SAACnE,EAAOtE,GAEvB,EAAKF,MAAM4I,WAAWpE,GAGtBhB,EAAU,EAAKxD,MAAM6E,UAAUL,GAAOK,YAvBrB,EA0BnBkB,YAAc,WACZ,EAAKzF,SAAS,CACZgC,MAAM,KA5BS,EAiCnBuG,KAAO,WAEL,IAAI7C,EAAS,EAAKhG,MAAM6E,UAAUmB,OAClC,GAAI,EAAKlF,MAAMgI,QAAS,CACtBtF,EAAU,EAAKxD,MAAM6E,WAAW,EAAK7E,MAAM8E,KAAO,GAAKkB,GAAQnB,WAG/D,IAAIoD,EAAQ,UAAMvH,aAAaC,QAAQ,eAA3B,YAA6C,EAAKX,MAAM8E,MAGhEC,EAAcb,IAElBF,EADW,CAACrC,KAAMjB,aAAaC,QAAQ,eAAgBqE,UAAWD,EAAaE,OAAO,mBAAD,OAAqB,EAAKjF,MAAM8E,KAAhC,cAA0C,EAAK9E,MAAM6E,UAAU,EAAK7E,MAAM8E,MAAMD,aAIrK,EAAK7E,MAAM+I,qBAIX,EAAKzI,SAAS,CACZwI,SAAS,IAEXtF,EAAU,EAAKxD,MAAM6E,UAAW,EAAK7E,MAAM8E,KAAQkB,GAAQnB,WAIzD,EAAK/D,MAAMgI,SACbd,EAAmBC,GAEjB,EAAKjI,MAAM8E,KAAOkB,GACpBmB,KA7DF,EAAKrG,MAAQ,CACXgI,SAAS,EACTxG,MAAM,GAJS,E,qDAoET,IAAD,OACP,OACE,yBAAKO,UAAU,oBACb,wBAAIA,UAAU,0BAAd,aACA,6BACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,yBACZJ,KAAK3B,MAAMgI,QACR,wBAAIjG,UAAU,cAAd,QAAiCJ,KAAKzC,MAAM8E,KAA5C,KACA,wBAAIjC,UAAU,cAAd,iBAEJ,6BACCJ,KAAKzC,MAAM6E,UAAUmB,OAAS,GAAKvD,KAAK3B,MAAMgI,QAC3C,uBAAGnG,GAAG,OAAOE,UAAU,aAAvB,IAAqCJ,KAAKzC,MAAM6E,UAAUpC,KAAKzC,MAAM8E,MAAMD,UAA3E,KACA,uBAAGlC,GAAG,OAAOE,UAAU,aAAvB,mDAIR,yBAAKA,UAAU,oBACb,4BAAQC,KAAK,SAASF,QAASH,KAAKuG,OAAQnG,UAAU,+CAAtD,UACA,4BAAQC,KAAK,SAASF,QAASH,KAAKoG,KAAMhG,UAAU,oDAApD,UAGJ,yBAAKA,UAAU,YACb,wBAAIA,UAAU,wDACXJ,KAAKzC,MAAM6E,UAAUqB,KAAI,SAACpB,EAAMqB,GAAP,OACxB,wBAAIC,IAAKD,EAAGvD,QAAS,EAAK+F,eAAetC,KAAK,EAAMF,GAAIxD,GAAI,IAAMwD,EAAGtD,UAAS,0BAAsB,EAAK7C,MAAM8E,OAASqB,GAAK,EAAKrF,MAAMgI,QAAW,SAAW,KAAOhE,EAAKD,kBAMpL,kBAAC,EAAD,CAAOkC,UAAWtE,KAAK3B,MAAMgI,e,GAzGbvF,aCoET0F,G,wDApEb,WAAYjJ,GAAQ,IAAD,8BACjB,cAAMA,IAORkJ,aAAe,WAEbtH,MAAM,kBACLI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAiC,GACJ7B,QAAQC,IAAI4B,GACZ,EAAK3D,SAAS,CACZuE,UAAWZ,QAfE,EAoBnB2E,WAAa,SAAC9D,GACZ,EAAKxE,SAAS,CACZwE,KAAMA,KAtBS,EA0BnBiE,cAAgB,WACd,EAAKzI,SAAS,CACZwE,MAAO,EAAKhE,MAAMgE,KAAO,GAAK,EAAKhE,MAAM+D,UAAUmB,UA1BrD,EAAKlF,MAAQ,CACX+D,UAAW,GACXC,KAAM,GAJS,E,gEAkCjBrC,KAAKyG,iB,+BAIL,OACE,6BAEE,yBAAKrG,UAAU,sBACb,6BACE,kBAAC,EAAD,CAAWkG,cAAetG,KAAKsG,cACnBH,WAAYnG,KAAKmG,WACjB9D,KAAMrC,KAAK3B,MAAMgE,KACjBD,UAAWpC,KAAK3B,MAAM+D,UACtBlD,KAAMc,KAAKzC,MAAM2B,SAMjC,yBAAKkB,UAAU,wBACb,6BACE,kBAAC,EAAD,CAAWkG,cAAetG,KAAKsG,cACnBH,WAAYnG,KAAKmG,WACjB9D,KAAMrC,KAAK3B,MAAMgE,KACjBD,UAAWpC,KAAK3B,MAAM+D,UACtBlD,KAAMc,KAAKzC,MAAM2B,c,GA7DtB4B,c,QCoBJ4F,E,kDAhBb,WAAYnJ,GAAQ,uCACZA,G,qDAIN,OACE,kBAAC,IAAD,CAAQF,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsJ,KAAK,IAAIC,OAAK,EAACC,UAAWvJ,IACjC,kBAAC,IAAD,CAAOqJ,KAAK,QAAQE,UAAWL,U,GAXvB1F,aCKEgG,QACW,cAA7B7F,OAAO8F,SAASC,UAEe,UAA7B/F,OAAO8F,SAASC,UAEhB/F,OAAO8F,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrE,SAASsE,eAAe,SDwHpB,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MACrBhI,MAAK,SAAAiI,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACL/H,QAAQ+H,MAAMA,EAAMC,c","file":"static/js/main.3999c355.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SmashLab.17d6023a.png\";","import { createBrowserHistory as history} from 'history';\n\nexport default history();","import React, { Component } from 'react';\nimport SmashLab from './SmashLab.png'\nimport './Login.css';\nimport history from '../../history';\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pnum: \"\",\n      enum: \"\",\n      eready: false,\n      econsent: false,\n      econsented: false,\n      pconsent: false,\n      edit: false\n    };\n  }\n\n  handleChange = (event) => {\n    const userEnum = event.target.value;\n    this.setState({\n      [event.target.name]: userEnum\n    });\n    \n    // Lookup Experimenter in LocalStorage\n    if (event.target.name === \"enum\") {\n      var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n      if (enums.includes(event.target.value)) {\n        this.setState({\n          econsent: true\n        })\n      }\n      else if (!this.state.econsented) {\n        this.setState({\n          econsent: false\n        })\n      }\n    }\n  }\n\n  // Handle Experimenter checkbox\n  handleExperimenterConsent = () => {\n    this.setState({\n      econsent: !this.state.econsent,\n      econsented: true\n    });\n  }\n\n  // Handle Participant checkbox\n  handleParticipantConsent = () => {\n    this.setState({\n      pconsent: !this.state.pconsent,\n    });\n  }\n\n  experimenterReady = () => {\n    // Insert enum into LocalStorage\n    var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n    if (!enums.includes(this.state.enum)) {\n      enums.push(this.state.enum);\n      localStorage.setItem(\"enums\", JSON.stringify(enums));\n    }\n      \n    this.setState ({\n      eready: true\n    });\n  }\n\n  participantReady = () => {\n    history.push('/Home', {pnum: this.state.pnum});\n\n    // Store current Participant Number in LocalStorage\n    localStorage.setItem(\"currentPnum\", this.state.pnum);\n\n    // Inform the server about the Participant Number\n    fetch('/api/pnum', {\n      method: 'POST',\n      body: JSON.stringify({\n        pnum: this.state.pnum\n      }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n\n  render() {\n\n    const isValidLogin = !(this.state.pnum.trim() === \"\" || this.state.enum.trim() === \"\" || !this.state.econsent || !this.state.pconsent);\n    let expButton, partButton;\n    if (isValidLogin) {\n      expButton = <button id=\"eready\" onClick={this.experimenterReady} className=\"btn btn-lg btn-primary btn-block\">Experimenter Ready</button>;\n    }\n    else {\n      expButton = \"\";\n    }\n\n    if (this.state.eready) {\n      partButton = <button id=\"pready\" onClick={this.participantReady} className=\"btn btn-lg btn-info btn-block\" type=\"submit\">Participant Ready</button>;\n    }\n    else {\n      partButton = \"\";\n    }\n\n    return (\n      <div className=\"login text-center\">\n        <div className=\"form-signin\">\n          <img className=\"mb-4 smash_logo\" src={SmashLab} alt=\"Smash Lab\" />\n          <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\n\n          {/* Experimenter Input Group */}\n          <div className=\"input-group mb-2\">\n            <input onChange={this.handleChange} type=\"text\" name=\"enum\" id=\"inputEnum\" className=\"form-control\" placeholder=\"Experimenter number\" value={this.state.enum} required autoFocus />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleExperimenterConsent} type=\"checkbox\" value=\"econsent\" checked={this.state.econsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {/* Participant Input Group */}\n          <div className=\"input-group mb-3\">\n            <input onChange={this.handleChange} type=\"text\" name=\"pnum\" id=\"inputPnum\" className=\"form-control\" placeholder=\"Participant Number\" value={this.state.pnum} required />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleParticipantConsent} type=\"checkbox\" value=\"pconsent\" checked={this.state.pconsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {expButton}\n          {partButton}\n        </div>\n      </div>\n     );\n  }\n}\n\nexport default Login;\n","export function insertToDatabase(db, table, data) {\n  var transaction = db.transaction([table], \"readwrite\");\n\n  transaction.oncomplete = function(event) {\n    console.log(\"All done!\");\n  };\n\n  transaction.onerror = function(event) {\n    // Generic error handler for all errors targeted at this database's request\n    console.error(\"Database error: \" + event.target.errorCode);    \n  };\n\n  var objectStore = transaction.objectStore(table);\n  var request = objectStore.add(data);\n  request.onsuccess = function(event) {\n  }\n}\n\nexport function databaseGetAll(db) {\n  var transaction = db.transaction('log', 'readonly');\n  var objectStore = transaction.objectStore('log');\n  objectStore.getAll().onsuccess = function(event) {\n    return event.target.result\n  };\n}\n\nexport function playSound(sound) {\n  window.speechSynthesis.cancel();\n  var msg = new SpeechSynthesisUtterance(sound);\n  window.speechSynthesis.speak(msg);\n}\n\nexport function logData(log) {\n    // Send log to server\n    fetch('/api/log', {\n      method: 'POST',\n      body: JSON.stringify(log),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n\nexport function getCurrentTime() {\n  var time = new Date().toLocaleString(\"en-US\", {timeZone: \"America/New_York\"});\n  return time.substr(11, 8);\n}","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Questions.css\";\n\nimport { getCurrentTime, playSound, logData } from \"../helpers\";\n\n\nclass Questions extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      step: 0,\n      edit: false\n    };\n  }\n\n  handleChange = (index, event) => {\n    // Update questions\n    let items = [...this.state.questions];\n    items[index] = event.target.value;\n\n    this.setState({\n      questions: items\n    });\n  }\n\n  handleClick = (index, event) => {\n    var question = this.props.procedure[this.props.step].questions[index][0];\n    var answer = this.props.procedure[this.props.step].questions[index][1];\n\n    // Play sound of answer\n    playSound(answer);\n\n    // Insert data to database (i.e. log data)\n    var timeElapsed = getCurrentTime();\n    var data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: `Question ${index}: ${question}`};\n    logData(data);\n  }\n\n  export = () => {\n    fetch('/api/export', {\n      method: 'POST',\n      body: JSON.stringify({\n        pnum: localStorage.getItem('currentPnum')\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.blob())\n    .then(blob => {\n      // Download Zip file\n      var url = window.URL.createObjectURL(blob);\n      var a = document.createElement('a');\n      a.href = url;\n      a.download = `${localStorage.getItem('currentPnum')}.zip`;\n      document.body.appendChild(a); \n      a.click();    \n      a.remove();  \n    });\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  render() {\n\n    // Wait for procedure to load\n    var procedure = [];\n    if (this.props.procedure.length > 0) {\n      procedure = this.props.procedure[this.props.step].questions.slice(0, 4);\n    }\n\n    return (\n      <div className=\"container full-height mt-2\">\n        <h2 className=\"text-center\">Questions</h2>\n        <hr/>\n\n        {/* Questions */}\n        <div className=\"list-group\">\n          {procedure.map((step, i) =>\n            <button key={i} onClick={this.handleClick.bind(this, i)} type=\"button\" className=\"btn btn-light btn-block question\">Q{i + 1}: {step[0]}</button>\n          )}\n        </div>\n        \n        {/* Reminder Button */}\n        <div className=\"container text-center mt-5\">\n              <button type=\"button\" onClick={this.recordTime} className=\"btn shadow ml-3 btn-dark btn-lg light-border\">\n                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-bell-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"/>\n                </svg>\n                <span className=\"ml-2\">Reminder</span>\n              </button>\n        </div>\n        \n        {/* Zip Folder */}\n        <div className=\"export mr-3 mb-3\">\n          <button onClick={this.export} className=\"btn btn-dark\"><i className=\"fa fa-download\" aria-hidden=\"true\"></i><span className=\"ml-2\">Finished</span></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Questions;","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Audio.css\";\n\nclass Audio extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"fixed-bottom ml-3 mb-3\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-xs-6\">\n              <button className=\"btn btn-light\">\n                <svg className=\"bi bi-mic-fill\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill={this.props.recording ? \"green\" : \"currentColor\"} d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\"/>\n                  <path fillRule=\"evenodd\" d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"/>\n                </svg>\n              </button>\n            </div>\n            <div className=\"col-xs-6 ml-3\">\n              <canvas className=\"visualizer\"></canvas>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Audio;","var mediaRecorder = {};\nvar chunks = [];\n\nexport function startAudioRecording() {\n  // Ensure getUserMedia is supported\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n    navigator.mediaDevices.getUserMedia (\n      {\n        audio: true\n      })\n\n      // Success callback, start recording\n      .then((stream) => startRecording(stream))\n\n      // Error callback\n      .catch(function(err) {\n        console.log('The following getUserMedia error occured: ' + err);\n      }\n    );\n  } else {\n    console.log('getUserMedia not supported on your browser!');\n  }\n}\n\nfunction startRecording(stream) {\n    // Start recording\n    mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.start(10);\n\n    // Start visualizing audio\n    // visualize(stream);\n\n    console.log(\"recorder started\");\n\n    mediaRecorder.ondataavailable = function(e) {\n      chunks.push(e.data);\n    }\n}\n\nexport function stopAudioRecording(filename) {\n  // Stop recording\n  mediaRecorder.stop();\n  console.log(mediaRecorder.state);\n  console.log(\"recorder stopped\");\n  mediaRecorder.onstop = (e) => stopRecording(e, filename);\n}\n\nfunction stopRecording(e, filename) {\n  // Stop and save the recording\n  console.log(\"recorder onstopped\");\n  const blob = new Blob(chunks, { 'type' : 'audio/wav;' });\n\n  // Package the data\n  var fd = new FormData();\n  fd.append(\"filename\", filename)\n  fd.append(\"pnum\", localStorage.getItem(\"currentPnum\"));\n  fd.append(\"audio\", blob);\n\n  // Send audio blob to server\n  fetch('/api/audio', {\n    method: 'POST',\n    body: fd,\n  })\n  .then(response => response.json())\n  .then(result => {\n    // Print result\n    console.log(result);\n  });\n\n  /*\n  // Format data to send to server (using base64 encoding)\n  var reader = new FileReader();\n  reader.readAsDataURL(blob);\n  reader.onload = function(event) {\n    var base64AudioMessage = event.target.result.split(',')[1];\n\n    // Send audio blob to server\n    fetch('/api/audio', {\n      method: 'POST',\n      body: JSON.stringify({\n        filename: 'hello.wav',\n        audiostring: base64AudioMessage\n      }),\n      headers: new Headers({ 'content-type': 'application/json' })\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n  */\n\n  chunks = [];\n\n  /*\n  const clipName = prompt('Enter a name for your sound clip');\n\n  const clipContainer = document.createElement('article');\n  const clipLabel = document.createElement('p');\n  const audio = document.createElement('audio');\n  const deleteButton = document.createElement('button');\n    \n  const soundClips = document.querySelector('.sound-clips');    \n\n  clipContainer.classList.add('clip');\n  audio.setAttribute('controls', '');\n  deleteButton.innerHTML = \"Delete\";\n  clipLabel.innerHTML = clipName;\n\n  clipContainer.appendChild(audio);\n  clipContainer.appendChild(clipLabel);\n  clipContainer.appendChild(deleteButton);\n  soundClips.appendChild(clipContainer);\n\n  audio.controls = true;\n  const blob = new Blob(chunks, { 'type' : 'audio/wav;' });\n  \n  chunks = [];\n  const audioURL = window.URL.createObjectURL(blob);\n  audio.src = audioURL;\n\n  deleteButton.onclick = function(e) {\n    let evtTgt = e.target;\n    evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n  }\n  */\n}\n\nfunction visualize(stream) {\n  // Visualize audio stream\n  const canvas = document.querySelector('.visualizer');\n  const canvasCtx = canvas.getContext(\"2d\");\n  let audioCtx;\n\n  if(!audioCtx) {\n    audioCtx = new AudioContext();\n  }\n\n  const source = audioCtx.createMediaStreamSource(stream);\n\n  const analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 2048;\n  const bufferLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n\n  source.connect(analyser);\n  //analyser.connect(audioCtx.destination);\n\n  draw()\n\n  function draw() {\n    const WIDTH = canvas.width\n    const HEIGHT = canvas.height;\n\n    requestAnimationFrame(draw);\n\n    analyser.getByteTimeDomainData(dataArray);\n\n    canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n\n    canvasCtx.beginPath();\n\n    let sliceWidth = WIDTH * 1.0 / bufferLength;\n    let x = 0;\n\n\n    for(let i = 0; i < bufferLength; i++) {\n\n      let v = dataArray[i] / 128.0;\n      let y = v * HEIGHT/2;\n\n      if(i === 0) {\n        canvasCtx.moveTo(x, y);\n      } else {\n        canvasCtx.lineTo(x, y);\n      }\n\n      x += sliceWidth;\n    }\n\n    canvasCtx.lineTo(canvas.width, canvas.height/2);\n    canvasCtx.stroke();\n\n  }\n}","import React, { Component } from \"react\";\nimport Audio from \"../Audio/Audio\"\nimport \"../../App.css\";\nimport \"./Procedure.css\";\nimport { getCurrentTime, playSound, logData } from \"../helpers\";\nimport { startAudioRecording, stopAudioRecording } from \"../audio\";\n\nclass Procedure extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      edit: false,\n    };\n  }\n\n  inputChange = (index, event) => {\n    // Update procedure\n    let items = [...this.props.procedure];\n    items[index] = event.target.value;\n\n    this.setState({\n      procedure: items\n    });\n  }\n\n  procedureClick = (index, event) => {\n    // Update step\n    this.props.updateStep(index);\n    \n    // Play sound\n    playSound(this.props.procedure[index].procedure);\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n\n  done = () => {\n    // Play sound of procedure\n    var length = this.props.procedure.length;\n    if (this.state.started) {\n      playSound(this.props.procedure[(this.props.step + 1) % length].procedure);\n\n      // Determine filename\n      var filename = `${localStorage.getItem(\"currentPnum\")}-${this.props.step}`;\n\n      // Insert data to database (i.e log data)\n      var timeElapsed = getCurrentTime();\n      var data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: `Procedure (Step ${this.props.step}): ${this.props.procedure[this.props.step].procedure}`};\n      logData(data);\n\n      // Update step\n      this.props.incrementStep();\n\n    }\n    else {\n      this.setState({\n        started: true\n      })\n      playSound(this.props.procedure[(this.props.step) % length].procedure)\n    }\n\n    // Stop recording\n    if (this.state.started) {\n      stopAudioRecording(filename);\n    }\n    if (this.props.step < length) {\n      startAudioRecording();\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"full-height mt-2\">\n        <h2 className=\"text-white text-center\">Procedure</h2>\n        <hr/>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"card mt-2\">\n                <div className=\"card-body text-center\">\n                  {this.state.started\n                    ? <h5 className=\"card-title\">Step {this.props.step}:</h5>\n                    : <h5 className=\"card-title\">Introduction:</h5>\n                  }\n                  <hr/>\n                  {this.props.procedure.length > 0 && this.state.started\n                    ? <p id=\"step\" className=\"card-text\"> {this.props.procedure[this.props.step].procedure} </p>\n                    : <p id=\"step\" className=\"card-text\"> Press DONE to begin procedure and recording.</p>\n                  }\n                </div>\n              </div>\n              <div className=\"text-center mt-4\">\n                <button type=\"button\" onClick={this.repeat} className=\"shadow btn btn-secondary btn-lg dark-border\">Repeat</button>\n                <button type=\"button\" onClick={this.done} className=\"shadow btn ml-4 btn-secondary btn-lg dark-border\">Done</button>                \n              </div>   \n            </div>\n            <div className=\"col-md-6\">\n              <ul className=\"list-group list-group-hover mt-2 mb-5 procedure-list\">\n                {this.props.procedure.map((step, i) => \n                  <li key={i} onClick={this.procedureClick.bind(this, i)} id={'l' + i} className={`list-group-item ${(this.props.step === i && this.state.started) ? 'active' : ''}`}>{step.procedure}</li>\n                )}\n              </ul>            \n            </div>\n          </div>\n        </div>\n        <Audio recording={this.state.started}></Audio>\n      </div>\n    );\n  }\n}\n\nexport default Procedure;","import React, { Component } from \"react\";\nimport Questions from '../Questions/Questions'\nimport Procedure from '../Procedure/Procedure'\nimport './Home.css';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      procedure: [], \n      step: 0\n    }\n  }\n\n  getProcedure = () => {\n    // Get a list of procedures\n    fetch('/api/procedure')\n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n      this.setState({\n        procedure: data\n      });\n    })\n  }\n\n  updateStep = (step) => {\n    this.setState({\n      step: step\n    })\n  }\n\n  incrementStep = () => {\n    this.setState({\n      step: (this.state.step + 1) % this.state.procedure.length\n    });\n  }\n\n  componentDidMount() {\n    // Get procedure\n    this.getProcedure();\n  }\n\n  render() {    \n    return (\n      <div>\n        {/* Left pane (Procedure section) */}\n        <div className=\"bg-dark split left\">\n          <div>\n            <Procedure incrementStep={this.incrementStep} \n                        updateStep={this.updateStep} \n                        step={this.state.step} \n                        procedure={this.state.procedure} \n                        pnum={this.props.pnum}>\n            </Procedure>\n          </div>\n        </div>\n\n        {/* Right pane (Questions sections) */}\n        <div className=\"bg-light split right\">\n          <div>\n            <Questions incrementStep={this.incrementStep} \n                        updateStep={this.updateStep} \n                        step={this.state.step} \n                        procedure={this.state.procedure} \n                        pnum={this.props.pnum}>\n            </Questions>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport Login from './Components/Login/Login'\nimport Home from './Components/Home/Home'\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './history';\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/Home\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}