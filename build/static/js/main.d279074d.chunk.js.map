{"version":3,"sources":["Components/Login/SmashLab.png","Components/helpers.js","history.js","Components/Login/Login.js","Components/Reminder/Reminder.js","Components/Questions/Questions.js","Components/audio.js","Components/Procedure_V2/Procedure.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","voices","history","playSound","sound","toLowerCase","includes","replace","window","speechSynthesis","cancel","msg","SpeechSynthesisUtterance","undefined","onvoiceschanged","voice","rate","speak","log","action","startTime","foldername","fetch","method","body","JSON","stringify","headers","then","response","json","data","console","logData","abs_timestamp","getCurrentTime","rel_timestamp","timeDiff","Date","secs","hours","Math","floor","minutes","seconds","formatSeconds","round","getTimeElapsed","getTodaysDate","today","day","getDate","month","getMonth","year","getFullYear","time","toLocaleString","timeZone","slice","lastIndexOf","substring","length","getVoices","Login","props","handleChange","event","userEnum","target","value","setState","name","parse","localStorage","getItem","econsent","state","econsented","handleExperimenterConsent","handleParticipantConsent","pconsent","experimenterReady","enums","enum","push","setItem","eready","etime","participantReady","pnum","version","ptime","result","filename","edit","expButton","partButton","this","trim","id","onClick","className","type","src","SmashLab","alt","onChange","placeholder","required","autoFocus","checked","Component","Reminder","reminder","width","height","viewBox","fill","xmlns","d","Questions","index","items","questions","handleClick","i","question","procedure","answer","handleUnanswerable","step","setEditMode","setRef","ref","updateQRefs","renderQuestions","key","style","backgroundColor","colors","map","bind","mediaRecorder","chunks","startAudioRecording","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","start","ondataavailable","e","startRecording","catch","err","stopAudioRecording","stop","onstop","blob","Blob","fd","FormData","append","stopRecording","Procedure","inputChange","procedureClick","started","background","prevClicked","updateStep","isRecording","scrollToQuestion","export","setTimeout","url","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","startProcedure","qPos","updateStartTime","getElementById","Audio","play","changeBackground","resetBackground","qRefs","scrollIntoView","block","behavior","ended","disabled","onMouseOver","onMouseOut","borderColor","Home","getProcedure","incrementStep","location","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,sC,6MCCvCC,E,6GCCWC,gBD8BR,SAASC,EAAUC,IAExBA,EAAQA,EAAMC,eACJC,SAAS,cACjBF,EAAQA,EAAMG,QAAQ,WAAY,cAEhCH,EAAME,SAAS,WACjBF,EAAQA,EAAMG,QAAQ,QAAS,UAGjCC,OAAOC,gBAAgBC,SAEvB,IAAIC,EAAM,IAAIC,yBAAyBR,GAER,qBAApBK,sBAAuEI,IAApCJ,gBAAgBK,kBAC5DH,EAAII,MAAQd,EAAO,IACnBU,EAAIK,KAAO,IACXR,OAAOC,gBAAgBQ,MAAMN,IAyB1B,SAASO,EAAIC,EAAQC,EAAWC,IAhBhC,SAAiBH,GAEtBI,MAAM,WAAY,CAChBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUR,GACrBS,QAAS,CACP,OAAU,mBACV,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQd,IAAIa,MASdE,CADW,CAACZ,WAAYA,EAAYa,cAFhBC,IAE8CC,cAD/B,UAAdhB,EAAyB,WAgBzC,SAAwBA,GAC7B,IACIiB,EADU,IAAIC,KACOlB,EAGzB,OAFAiB,GAAY,IAdP,SAAuBE,GAC5B,IAAIC,EAAUC,KAAKC,MAAMH,EAAO,MAC5BI,EAAUF,KAAKC,OAAOH,EAAgB,KAARC,GAAiB,IAC/CI,EAAUL,EAAgB,KAARC,EAA2B,GAAVG,EAEnCH,EAAU,KAAKA,EAAU,IAAIA,GAC7BG,EAAU,KAAKA,EAAU,IAAIA,GAC7BC,EAAU,KAAKA,EAAU,IAAIA,GACjC,OAAQJ,EAAM,IAAIG,EAAQ,IAAIC,EAQvBC,CAAcJ,KAAKK,MAAMT,IArB2BU,CAAe3B,GACsBD,OAAQA,IAuBnG,SAAS6B,IACd,IAAIC,EAAQ,IAAIX,KACZY,EAAMD,EAAME,UACZC,EAASH,EAAMI,WAAa,GAApB,WAA8BJ,EAAMI,WAAa,GAAOJ,EAAMI,WAAa,EACnFC,EAAOL,EAAMM,cAEjB,MADQ,UAAMH,GAAN,OAAcF,GAAd,OAAoBI,GAIvB,SAASnB,IACd,IAAIqB,GAAO,IAAIlB,MAAOmB,eAAe,QAAS,CAACC,SAAU,qBAGzD,OADAF,GADAA,EAAOA,EAAKG,MAAMH,EAAKI,YAAY,KAAO,IAC9BC,UAAU,EAAGL,EAAKM,OAAS,GA/GzCtD,OAAOC,gBAAgBK,gBAAkB,WACvCb,EAASO,OAAOC,gBAAgBsD,a,IEmLnBC,E,kDA9Kb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAyBRC,aAAe,SAACC,GACd,IAAMC,EAAWD,EAAME,OAAOC,OAC9B,EAAKC,SAAL,eACGJ,EAAME,OAAOG,KAAOJ,IAIG,SAAtBD,EAAME,OAAOG,QACH/C,KAAKgD,MAAMC,aAAaC,QAAQ,UAAY,MAC9CrE,SAAS6D,EAAME,OAAOC,OAC9B,EAAKC,SAAS,CACZK,UAAU,IAGJ,EAAKC,MAAMC,YACnB,EAAKP,SAAS,CACZK,UAAU,MA1CC,EAiDnBG,0BAA4B,WAC1B,EAAKR,SAAS,CACZK,UAAW,EAAKC,MAAMD,SACtBE,YAAY,KApDG,EAyDnBE,yBAA2B,WACzB,EAAKT,SAAS,CACZU,UAAW,EAAKJ,MAAMI,YA3DP,EA+DnBC,kBAAoB,WAElB,IAAIC,EAAQ1D,KAAKgD,MAAMC,aAAaC,QAAQ,UAAY,MACnDQ,EAAM7E,SAAS,EAAKuE,MAAMO,QAC7BD,EAAME,KAAK,EAAKR,MAAMO,MACtBV,aAAaY,QAAQ,QAAS7D,KAAKC,UAAUyD,KAG/C,EAAKZ,SAAU,CACbgB,QAAQ,EACRC,MAAOrD,OAzEQ,EA6EnBsD,iBAAmB,WAEjBf,aAAaY,QAAQ,cAAe,EAAKT,MAAMa,MAG/ChB,aAAaY,QAAQ,cAAe,EAAKT,MAAMO,MAGpCpC,IAAX,IACIQ,EAAOrB,IAAiB5B,QAAQ,KAAM,IACtCc,EAAU,UAAMmC,EAAN,YAAc,EAAKqB,MAAMO,KAAzB,YAAiC,EAAKP,MAAMa,KAA5C,YAAoD,EAAKb,MAAMc,SAE7EzF,EAAQmF,KAAK,QAAS,CAACK,KAAM,EAAKb,MAAMa,KAAMrE,WAAYA,IAG1DC,MAAM,YAAa,CACjBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBL,WAAYA,EACZqE,KAAM,EAAKb,MAAMa,KACjBF,MAAO,EAAKX,MAAMW,MAClBI,MAAOzD,MAETR,QAAS,CACP,OAAU,mBACV,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAiE,GAEJ7D,QAAQd,IAAI2E,MAIdvE,MAAM,eAAgB,CACpBC,OAAQ,SAETK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAiE,GAEJ7D,QAAQd,IAAI2E,OApHd,EAAKhB,MAAQ,CACXa,KAAM,GACNN,KAAM,GACNI,MAAO,GACPM,SAAU,GACVP,QAAQ,EACRX,UAAU,EACVE,YAAY,EACZG,UAAU,EACVc,MAAM,GAXS,E,gEAeE,IAAD,OAElBzE,MAAM,gBACLM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKwC,SAAS,CACZoB,QAAS5D,EAAI,e,+BAuGjB,IACIiE,EAAWC,EAef,OAbED,IAHgD,KAA3BE,KAAKrB,MAAMa,KAAKS,QAA4C,KAA3BD,KAAKrB,MAAMO,KAAKe,SAAkBD,KAAKrB,MAAMD,WAAasB,KAAKrB,MAAMI,UAG/G,4BAAQmB,GAAG,SAASC,QAASH,KAAKhB,kBAAmBoB,UAAU,oCAA/D,sBAGA,GAIZL,EADEC,KAAKrB,MAAMU,OACA,4BAAQa,GAAG,SAASC,QAASH,KAAKT,iBAAkBa,UAAU,gCAAgCC,KAAK,UAAnG,qBAGA,GAIb,yBAAKD,UAAU,qBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,kBAAkBE,IAAKC,IAAUC,IAAI,cACpD,wBAAIJ,UAAU,8BAAd,kBAGA,yBAAKA,UAAU,oBACb,2BAAOK,SAAUT,KAAKhC,aAAcqC,KAAK,OAAO/B,KAAK,OAAO4B,GAAG,YAAYE,UAAU,eAAeM,YAAY,sBAAsBtC,MAAO4B,KAAKrB,MAAMO,KAAMyB,UAAQ,EAACC,WAAS,IAChL,yBAAKR,UAAU,sBACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,OAAOK,SAAUT,KAAKnB,0BAA2BwB,KAAK,WAAWjC,MAAM,WAAWyC,QAASb,KAAKrB,MAAMD,WADzH,cAOJ,yBAAK0B,UAAU,oBACb,2BAAOK,SAAUT,KAAKhC,aAAcqC,KAAK,OAAO/B,KAAK,OAAO4B,GAAG,YAAYE,UAAU,eAAeM,YAAY,qBAAqBtC,MAAO4B,KAAKrB,MAAMa,KAAMmB,UAAQ,IACrK,yBAAKP,UAAU,sBACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,OAAOK,SAAUT,KAAKlB,yBAA0BuB,KAAK,WAAWjC,MAAM,WAAWyC,QAASb,KAAKrB,MAAMI,WADxH,cAMHe,EACAC,Q,GAzKSe,a,gBCkCLC,G,6DAhCb,WAAYhD,GAAQ,IAAD,8BACjB,cAAMA,IAGRiD,SAAW,WAET/G,EAAU,4EAIVe,EADa,oBACD,EAAK+C,MAAM7C,UAAW,EAAK6C,MAAM5C,aAV5B,E,qDAcjB,OACE,yBAAKiF,UAAU,0BACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,4BAAQD,QAASH,KAAKgB,SAAUZ,UAAU,gBACxC,yBAAKa,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYf,UAAU,kBAAkBgB,KAAK,eAAeC,MAAM,8BACtG,0BAAMD,KAAK,aAAaE,EAAE,2K,GAvBrBR,cCqHRS,G,wDAjHb,WAAYxD,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,aAAe,SAACwD,EAAOvD,GAErB,IAAIwD,EAAK,YAAO,EAAK9C,MAAM+C,WAC3BD,EAAMD,GAASvD,EAAME,OAAOC,MAE5B,EAAKC,SAAS,CACZqD,UAAWD,KAbI,EAiBnBE,YAAc,SAACH,EAAOI,EAAG3D,GACvB,IAAI4D,EAAW,EAAK9D,MAAM+D,UAAUF,GAAGF,UAAUF,GAAO,GACpDO,EAAS,EAAKhE,MAAM+D,UAAUF,GAAGF,UAAUF,GAAO,GAItDxG,EADU,WAAO4G,EAAI,EAAX,YAAgBJ,EAAQ,EAAxB,aAA8BK,GAC5B,EAAK9D,MAAM7C,UAAW,EAAK6C,MAAM5C,YAG7ClB,EAAU8H,IA1BO,EA6BnBC,mBAAqB,WAGnBhH,EADU,WAAO,EAAK+C,MAAMkE,KAAO,EAAzB,mBACE,EAAKlE,MAAM7C,UAAW,EAAK6C,MAAM5C,aAhC5B,EAmCnB6F,SAAW,WACTlF,QAAQd,IAAI,SAEZf,EAAU,4EAIVe,EADa,oBACD,EAAK+C,MAAM7C,UAAW,EAAK6C,MAAM5C,aA1C5B,EA6CnB+G,YAAc,WACZ,EAAK7D,SAAS,CACZwB,MAAM,KA/CS,EAmDnBsC,OAAS,SAACC,GACR,EAAKrE,MAAMsE,YAAYD,IApDN,EAuDnBE,gBAAkB,SAACL,EAAML,GACvB,OACA,yBACEW,IAAG,UAAKX,GACRxB,UAAS,UAAM,EAAKrC,MAAMkE,MAAQ,GAAK,EAAKlE,MAAM+D,UAAUF,GAAGF,UAAU9D,OAAS,EAAK,eAAiB,IACxG4E,MAAO,CAACC,gBAAgB,IAAD,OAAM,EAAK1E,MAAM2E,OAAOd,MAC9CK,EAAKU,KAAI,SAACd,EAAUL,GAAX,OACR,4BAAQe,IAAG,UAAKX,GAAL,OAASJ,GACZY,IAAK,EAAKD,OACVhC,QAAS,EAAKwB,YAAYiB,KAAjB,eAA4BpB,EAAOI,GAC5CvB,KAAK,SACLD,UAAS,2CAAuC,EAAKrC,MAAMkE,KAAO,EAAK,OAAS,KAJxF,IAIgGT,EAAQ,EAJxG,KAI6GK,EAAS,OAGxH,4BAAQ1B,QAAS,EAAK6B,mBAAoB3B,KAAK,SAASD,UAAS,2CAAuC,EAAKrC,MAAMkE,KAAO,EAAK,OAAS,KAAxI,kBAnEF,EAAKtD,MAAQ,CACXkB,MAAM,GAHS,E,qDA+EjB,IALQ,IAAD,OAGH6B,EAAY,GAEPE,EAAI,EAAGA,EAAI5B,KAAKjC,MAAM+D,UAAUlE,OAAQgE,IAC/CF,EAAUvC,KAAKa,KAAKjC,MAAM+D,UAAUF,GAAGF,WAOzC,OAJI1B,KAAKjC,MAAM+D,UAAUlE,OAAS,GAAKoC,KAAKjC,MAAMkE,MAAQ,GAC5CjC,KAAKjC,MAAM+D,UAAU9B,KAAKjC,MAAMkE,MAAMP,UAIlD,yBAAKtB,UAAU,8BACb,wBAAIA,UAAU,eAAd,aACA,6BAGA,yBAAKA,UAAU,cACZsB,EAAUiB,KAAI,SAACV,EAAML,GACpB,OAAO,EAAKU,gBAAgBL,EAAML,OAMtC,kBAAC,EAAD,CAAU1G,UAAW8E,KAAKjC,MAAM7C,UAAWC,WAAY6E,KAAKjC,MAAM5C,kB,GAvGlD2F,cCRpB+B,G,MAAgB,IAChBC,EAAS,GAEN,SAASC,IAEVC,UAAUC,cAAgBD,UAAUC,aAAaC,cACnDpH,QAAQd,IAAI,2BACZgI,UAAUC,aAAaC,aACrB,CACEC,OAAO,IAIRzH,MAAK,SAAC0H,GAAD,OAYZ,SAAwBA,IAEtBP,EAAgB,IAAIQ,cAAcD,IACpBE,MAAM,IAKpBxH,QAAQd,IAAI,oBAEZ6H,EAAcU,gBAAkB,SAASC,GACvCV,EAAO3D,KAAKqE,EAAE3H,OAvBM4H,CAAeL,MAGhCM,OAAM,SAASC,GACd7H,QAAQd,IAAI,6CAA+C2I,OAI/D7H,QAAQd,IAAI,+CAmBT,SAAS4I,EAAmBhE,EAAUzE,GAE3C0H,EAAcgB,OACd/H,QAAQd,IAAI6H,EAAclE,OAC1B7C,QAAQd,IAAI,oBACZ6H,EAAciB,OAAS,SAACN,GAAD,OAGzB,SAAuBA,EAAG5D,EAAUzE,GAElCW,QAAQd,IAAI,sBACZ,IAAM+I,EAAO,IAAIC,KAAKlB,EAAQ,CAAE,KAAS,wBAGrCmB,EAAK,IAAIC,SACbD,EAAGE,OAAO,WAAYvE,GACtBqE,EAAGE,OAAO,aAAchJ,GACxB8I,EAAGE,OAAO,OAAQ3F,aAAaC,QAAQ,gBACvCwF,EAAGE,OAAO,QAASJ,GAGnB3I,MAAM,aAAc,CAClBC,OAAQ,OACRC,KAAM2I,IAEPvI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAiE,GAEJ7D,QAAQd,IAAI2E,MA2BdmD,EAAS,GAlDqBsB,CAAcZ,EAAG5D,EAAUzE,I,ICsM5CkJ,E,kDA3Ob,WAAYtG,GAAQ,IAAD,8BACjB,cAAMA,IAYRuG,YAAc,SAAC9C,EAAOvD,GAEpB,IAAIwD,EAAK,YAAO,EAAK1D,MAAM+D,WAC3BL,EAAMD,GAASvD,EAAME,OAAOC,MAE5B,EAAKC,SAAS,CACZyD,UAAWL,KAnBI,EAuBnB8C,eAAiB,SAAC/C,EAAOvD,GAEvB,GAAK,EAAKU,MAAM6F,QAAhB,CAoBA,GAfAvG,EAAME,OAAOqE,MAAMiC,WAAnB,WAAoC,EAAK1G,MAAM2E,OAAOlB,IAClD,EAAKkD,cAAa,EAAKA,YAAYlC,MAAMiC,WAAa,SAC1D,EAAKC,YAAczG,EAAME,OAGzB,EAAKJ,MAAM4G,WAAWnD,GAItBxG,EADU,WAAOwG,EAAQ,EAAf,aAAqB,EAAKzD,MAAM+D,UAAUN,GAAOM,WAC/C,EAAK/D,MAAM7C,UAAW,EAAK6C,MAAM5C,YAG7ClB,EAAU,EAAK8D,MAAM+D,UAAUN,GAAOM,WAGlC,EAAKnD,MAAM6F,QAAS,CAEX1H,IACAb,IAAiB5B,QAAQ,KAAM,IAC7BmE,aAAaC,QAAQ,eACvBD,aAAaC,QAAQ,eAGhCmF,EADY,UAAM,EAAK7F,MAAM5C,WAAjB,YAA+B,EAAKwD,MAAM6C,OACzB,EAAKzD,MAAM5C,YAExC,EAAKkD,SAAS,CACZuG,aAAa,IAIjB,GAAIpD,EAAQ,EAAKzD,MAAM+D,UAAUlE,OAC/BmF,IACA,EAAK1E,SAAS,CACZuG,aAAa,IAGf,EAAKC,iBAAiBrD,OAEnB,CAGHxG,EADa,mBACD,EAAK+C,MAAM7C,UAAW,EAAK6C,MAAM5C,YAI/C,EAAKkD,SAAS,CACZmD,MAAO,EAAK7C,MAAM6C,MAAQ,MA5EX,EAgFnBU,YAAc,WACZ,EAAK7D,SAAS,CACZwB,MAAM,KAlFS,EAsFnBiF,OAAS,WACP,GAAI,EAAKnG,MAAMiG,YAAa,CAEf9H,IACAb,IAAiB5B,QAAQ,KAAM,IAC7BmE,aAAaC,QAAQ,eACvBD,aAAaC,QAAQ,eAGhCmF,EADY,UAAM,EAAK7F,MAAM5C,WAAjB,YAA+B,EAAKwD,MAAM6C,OACzB,EAAKzD,MAAM5C,YAIxCH,EADa,mBACD,EAAK+C,MAAM7C,UAAW,EAAK6C,MAAM5C,YAE7C,EAAKkD,SAAS,CACZuG,aAAa,IAKjBG,YAAY,WAEV3J,MAAM,cAAe,CACnBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBL,WAAY,EAAK4C,MAAM5C,aAEzBM,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASoI,UAC1BrI,MAAK,SAAAqI,GAEJ,IAAIiB,EAAM1K,OAAO2K,IAAIC,gBAAgBnB,GACjCoB,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,KAAON,EACTG,EAAEI,SAAF,UAAgB,EAAKxH,MAAM5C,WAA3B,QACAiK,SAAS9J,KAAKkK,YAAYL,GAC1BA,EAAEM,QACFN,EAAEO,YAIJ,EAAKrH,SAAS,CACZmG,SAAS,MAEV,MAtIc,EAyInBmB,eAAiB,WACf,EAAKtH,SAAS,CACZmG,SAAS,IAIXzB,IAGA,IAAIvB,EAAQ,EACZ,EAAKoE,KAAKzG,KAAK,GACf,IAAK,IAAIyC,EAAI,EAAGA,EAAI,EAAK7D,MAAM+D,UAAUlE,OAAQgE,IAC/CJ,GAAS,EAAKzD,MAAM+D,UAAUF,GAAGF,UAAU9D,OAC3C,EAAKgI,KAAKzG,KAAKqC,GAIjB,IAAIvG,EAAS,qBACbD,EAAIC,EAAQ,QAAS,EAAK8C,MAAM5C,YAGhC,IAAID,EAAY,IAAIkB,KACpB,EAAK2B,MAAM8H,gBAAgB3K,GAG3B,EAAK6C,MAAM4G,WAAW,GAGtBS,SAASU,eAAe,MAAMtD,MAAMiC,WAApC,WAAqD,EAAK1G,MAAM2E,OAAO,IACvE,EAAKgC,YAAcU,SAASU,eAAe,MNxHlC,IAAIC,MAAM,YAChBC,OM6HHjB,YAAY,WAGV/J,EADAC,EAAM,WAAO,EAAK8C,MAAMkE,KAAO,EAAzB,aAA+B,EAAKlE,MAAM+D,UAAU,EAAK/D,MAAMkE,MAAMH,WAC/D,EAAK/D,MAAM7C,UAAW,EAAK6C,MAAM5C,YAG7ClB,EAAU,EAAK8D,MAAM+D,UAAU,GAAGA,aAEjC,MApLc,EAuLnBmE,iBAAmB,SAACrE,EAAG4B,GACrBA,EAAErF,OAAOqE,MAAMiC,WAAf,WAAgC,EAAK1G,MAAM2E,OAAOd,KAxLjC,EA2LnBsE,gBAAkB,SAACtE,EAAG4B,GAChBA,EAAErF,SAAW,EAAKuG,cACpBlB,EAAErF,OAAOqE,MAAMiC,WAAa,UA7Lb,EAiMnBI,iBAAmB,SAACjD,GAClB,IAAIJ,EAAQ,EAAKoE,KAAKhE,GAClBJ,EAAQ,EAAKzD,MAAMoI,MAAMvI,QAC3B,EAAKG,MAAMoI,MAAM3E,GAAO4E,eAAe,CAAEC,MAAO,QAAUC,SAAU,YAlMtE,EAAK3H,MAAQ,CACX6F,SAAS,EACT+B,OAAO,EACP1G,MAAM,EACN+E,aAAa,EACbpD,MAAO,GAET,EAAKoE,KAAO,GACZ,EAAKlB,YAAc,KAVF,E,qDAwMT,IAAD,OACP,OACE,yBAAKtE,UAAU,oBACb,wBAAIA,UAAU,0BAAd,aACA,6BACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,uCACb,4BAAQD,QAASH,KAAK2F,eAAgBzF,GAAG,QAAQE,UAAS,uBAA1D,SAAyF,mCAAzF,uCACCJ,KAAKjC,MAAM+D,UAAUa,KAAI,SAACV,EAAML,GAAP,OACxB,4BAAQW,IAAKX,EACTzB,QAAS,EAAKoE,eAAe3B,KAAK,EAAMhB,GACxC1B,GAAI,IAAM0B,EACV4E,UAAW,EAAK7H,MAAM6F,QACtBiC,YAAa,EAAKR,iBAAiBrD,KAAK,EAAMhB,GAC9C8E,WAAY,EAAKR,gBAAgBtD,KAAK,EAAMhB,GAC5CY,MAAO,CAACmE,YAAY,IAAD,OAAM,EAAK5I,MAAM2E,OAAOd,KAC3CxB,UAAS,+BAA0B,EAAKrC,MAAMkE,OAASL,GAAK,EAAKjD,MAAM6F,QAAW,IAAzE,YAAsF,EAAK7F,MAAM6F,QAAwB,GAAb,aAClHvC,EAAKH,cAGd,4BAAQ3B,QAASH,KAAK8E,OAAQ5E,GAAG,QAC7BE,UAAS,8BAA2BJ,KAAKrB,MAAM6F,QAAkD,GAAvC,uCAD9D,SAEY,mCAFZ,2D,GAhOQ1D,aC2FT8F,G,wDA1Fb,WAAY7I,GAAQ,IAAD,8BACjB,cAAMA,IASR8I,aAAe,WAEbzL,MAAM,kBACLM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKwC,SAAS,CACZyD,UAAWjG,QAhBE,EAqBnBgK,gBAAkB,SAAC3K,GACjB,EAAKmD,SAAS,CACZnD,UAAWA,KAvBI,EA2BnByJ,WAAa,SAAC1C,GACZ,EAAK5D,SAAS,CACZ4D,KAAMA,KA7BS,EAiCnB6E,cAAgB,WACd,EAAKzI,SAAS,CACZ4D,MAAO,EAAKtD,MAAMsD,KAAO,GAAK,EAAKtD,MAAMmD,UAAUlE,UAnCpC,EAuCnBuI,MAAQ,GAvCW,EAwCnB9D,YAAc,SAACD,GACb,EAAK+D,MAAMhH,KAAKiD,IAvChB,EAAKzD,MAAQ,CACXmD,UAAW,GACX5G,UAAW,EACX+G,MAAO,GAET,EAAKS,OAAS,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,UAPxF,E,gEA8CjB1C,KAAK6G,iB,+BAIL,OACE,6BAEE,yBAAKzG,UAAU,sBACb,6BACE,kBAAC,EAAD,CAAW0G,cAAe9G,KAAK8G,cACnBnC,WAAY3E,KAAK2E,WACjB1C,KAAMjC,KAAKrB,MAAMsD,KACjB4D,gBAAiB7F,KAAK6F,gBACtB3K,UAAW8E,KAAKrB,MAAMzD,UACtBmH,YAAarC,KAAKqC,YAClB8D,MAAOnG,KAAKmG,MACZzD,OAAQ1C,KAAK0C,OACbZ,UAAW9B,KAAKrB,MAAMmD,UACtB3G,WAAY6E,KAAKjC,MAAMgJ,SAASpI,MAAMxD,eAMtD,yBAAKiF,UAAU,wBACb,6BACE,kBAAC,EAAD,CAAW0G,cAAe9G,KAAK8G,cACnBnC,WAAY3E,KAAK2E,WACjB1C,KAAMjC,KAAKrB,MAAMsD,KACjB4D,gBAAiB7F,KAAK6F,gBACtB3K,UAAW8E,KAAKrB,MAAMzD,UACtBmH,YAAarC,KAAKqC,YAClB8D,MAAOnG,KAAKmG,MACZzD,OAAQ1C,KAAK0C,OACbZ,UAAW9B,KAAKrB,MAAMmD,UACtB3G,WAAY6E,KAAKjC,MAAMgJ,SAASpI,MAAMxD,oB,GAnF3C2F,c,QCoBJkG,E,kDAhBb,WAAYjJ,GAAQ,uCACZA,G,qDAIN,OACE,kBAAC,IAAD,CAAQ/D,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiN,KAAK,IAAIC,OAAK,EAACC,UAAWrJ,IACjC,kBAAC,IAAD,CAAOmJ,KAAK,QAAQE,UAAWP,U,GAXvB9F,aCKEsG,QACW,cAA7B9M,OAAOyM,SAASM,UAEe,UAA7B/M,OAAOyM,SAASM,UAEhB/M,OAAOyM,SAASM,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASU,eAAe,SDwHpB,kBAAmB9C,WACrBA,UAAU0E,cAAcC,MACrBjM,MAAK,SAAAkM,GACJA,EAAaC,gBAEdnE,OAAM,SAAAoE,GACLhM,QAAQgM,MAAMA,EAAMC,a","file":"static/js/main.d279074d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SmashLab.17d6023a.png\";","// Wait for voices to load\nvar voices;\nwindow.speechSynthesis.onvoiceschanged = function() {\n  voices = window.speechSynthesis.getVoices();\n};\n\nexport function insertToDatabase(db, table, data) {\n  var transaction = db.transaction([table], \"readwrite\");\n\n  transaction.oncomplete = function(event) {\n    console.log(\"All done!\");\n  };\n\n  transaction.onerror = function(event) {\n    // Generic error handler for all errors targeted at this database's request\n    console.error(\"Database error: \" + event.target.errorCode);    \n  };\n\n  var objectStore = transaction.objectStore(table);\n  var request = objectStore.add(data);\n  request.onsuccess = function(event) {\n  }\n}\n\nexport function databaseGetAll(db) {\n  var transaction = db.transaction('log', 'readonly');\n  var objectStore = transaction.objectStore('log');\n  objectStore.getAll().onsuccess = function(event) {\n    return event.target.result\n  };\n}\n\nexport function playSound(sound) {\n  // Hard-code phonetics\n  sound = sound.toLowerCase();\n  if (sound.includes(\"vaseline\")) {\n    sound = sound.replace(\"vaseline\", \"vaselleen\");\n  }\n  if (sound.includes(\"wound\")) {\n    sound = sound.replace(\"wound\", \"woond\");\n  }\n\n  window.speechSynthesis.cancel();\n\n  var msg = new SpeechSynthesisUtterance(sound);\n\n  if (typeof speechSynthesis !== 'undefined' && speechSynthesis.onvoiceschanged !== undefined) {\n    msg.voice = voices[49]; // \"Google US English\"\n    msg.rate = 0.75;\n    window.speechSynthesis.speak(msg);\n  }\n}\n\nexport function playBeep() {\n  var beep = new Audio(\"beep.mp3\");\n  beep.play();\n}\n\nexport function logData(log) {\n  // Send log to server\n  fetch('/api/log', {\n    method: 'POST',\n    body: JSON.stringify(log),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n  })\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n  });\n}\n\nexport function log(action, startTime, foldername) {\n  // Log action to database\n  var abs_timestamp = getCurrentTime();\n  var rel_timestamp = (startTime === \"start\") ? \"00:00:00\" : getTimeElapsed(startTime);\n  var data = {foldername: foldername, abs_timestamp: abs_timestamp, rel_timestamp: rel_timestamp, action: action};\n  logData(data);\n}\n\nexport function formatSeconds(secs) {\n  var hours   = Math.floor(secs / 3600);\n  var minutes = Math.floor((secs - (hours * 3600)) / 60);\n  var seconds = secs - (hours * 3600) - (minutes * 60);\n\n  if (hours   < 10) {hours   = \"0\"+hours;}\n  if (minutes < 10) {minutes = \"0\"+minutes;}\n  if (seconds < 10) {seconds = \"0\"+seconds;}\n  return (hours+':'+minutes+':'+seconds);\n}\n\nexport function getTimeElapsed(startTime) {\n  var endTime = new Date();\n  var timeDiff = endTime - startTime;\n  timeDiff /= 1000;\n\n  return formatSeconds(Math.round(timeDiff));\n}\n\nexport function getTodaysDate() {\n  var today = new Date();\n  var day = today.getDate();\n  var month = (today.getMonth() < 10) ? `0${today.getMonth() + 1}` : (today.getMonth() + 1);\n  var year = today.getFullYear();\n  var date = `${month}${day}${year}`;\n  return date;\n}\n\nexport function getCurrentTime() {\n  var time = new Date().toLocaleString(\"en-US\", {timeZone: \"America/New_York\"});\n  time = time.slice(time.lastIndexOf(',') + 2);;\n  time = time.substring(0, time.length - 3);\n  return time;\n}","import { createBrowserHistory as history} from 'history';\n\nexport default history();","import React, { Component } from 'react';\nimport SmashLab from './SmashLab.png'\nimport './Login.css';\nimport history from '../../history';\nimport { getCurrentTime, getTodaysDate } from \"../helpers\";\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pnum: \"\",\n      enum: \"\",\n      etime: \"\",\n      filename: \"\",\n      eready: false,\n      econsent: false,\n      econsented: false,\n      pconsent: false,\n      edit: false\n    };\n  }\n\n  componentDidMount() {\n    // Get current version number\n    fetch('/api/version')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        version: data[\"version\"]\n      });\n    })\n  }\n\n  handleChange = (event) => {\n    const userEnum = event.target.value;\n    this.setState({\n      [event.target.name]: userEnum\n    });\n    \n    // Lookup Experimenter in LocalStorage\n    if (event.target.name === \"enum\") {\n      var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n      if (enums.includes(event.target.value)) {\n        this.setState({\n          econsent: true\n        })\n      }\n      else if (!this.state.econsented) {\n        this.setState({\n          econsent: false\n        })\n      }\n    }\n  }\n\n  // Handle Experimenter checkbox\n  handleExperimenterConsent = () => {\n    this.setState({\n      econsent: !this.state.econsent,\n      econsented: true\n    });\n  }\n\n  // Handle Participant checkbox\n  handleParticipantConsent = () => {\n    this.setState({\n      pconsent: !this.state.pconsent,\n    });\n  }\n\n  experimenterReady = () => {\n    // Insert enum into LocalStorage\n    var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n    if (!enums.includes(this.state.enum)) {\n      enums.push(this.state.enum);\n      localStorage.setItem(\"enums\", JSON.stringify(enums));\n    }\n      \n    this.setState ({\n      eready: true,\n      etime: getCurrentTime()\n    });\n  }\n\n  participantReady = () => {\n    // Store current Participant Number in LocalStorage\n    localStorage.setItem(\"currentPnum\", this.state.pnum);\n\n    // Store current Experimenter Number in LocalStorage\n    localStorage.setItem(\"currentEnum\", this.state.enum);\n\n    // Deteremine filename\n    var date = getTodaysDate();\n    var time = getCurrentTime().replace(/:/g, '');\n    var foldername = `${time}_${this.state.enum}_${this.state.pnum}_${this.state.version}`;\n\n    history.push('/Home', {pnum: this.state.pnum, foldername: foldername});\n\n    // Inform the server about the Participant Number\n    fetch('/api/pnum', {\n      method: 'POST',\n      body: JSON.stringify({\n        foldername: foldername,\n        pnum: this.state.pnum,\n        etime: this.state.etime,\n        ptime: getCurrentTime()\n      }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n\n    // Update version number\n    fetch('/api/version', {\n      method: 'POST',\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n\n  render() {\n\n    const isValidLogin = !(this.state.pnum.trim() === \"\" || this.state.enum.trim() === \"\" || !this.state.econsent || !this.state.pconsent);\n    let expButton, partButton;\n    if (isValidLogin) {\n      expButton = <button id=\"eready\" onClick={this.experimenterReady} className=\"btn btn-lg btn-primary btn-block\">Experimenter Ready</button>;\n    }\n    else {\n      expButton = \"\";\n    }\n\n    if (this.state.eready) {\n      partButton = <button id=\"pready\" onClick={this.participantReady} className=\"btn btn-lg btn-info btn-block\" type=\"submit\">Participant Ready</button>;\n    }\n    else {\n      partButton = \"\";\n    }\n\n    return (\n      <div className=\"login text-center\">\n        <div className=\"form-signin\">\n          <img className=\"mb-4 smash_logo\" src={SmashLab} alt=\"Smash Lab\" />\n          <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\n\n          {/* Experimenter Input Group */}\n          <div className=\"input-group mb-2\">\n            <input onChange={this.handleChange} type=\"text\" name=\"enum\" id=\"inputEnum\" className=\"form-control\" placeholder=\"Experimenter number\" value={this.state.enum} required autoFocus />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleExperimenterConsent} type=\"checkbox\" value=\"econsent\" checked={this.state.econsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {/* Participant Input Group */}\n          <div className=\"input-group mb-3\">\n            <input onChange={this.handleChange} type=\"text\" name=\"pnum\" id=\"inputPnum\" className=\"form-control\" placeholder=\"Participant Number\" value={this.state.pnum} required />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleParticipantConsent} type=\"checkbox\" value=\"pconsent\" checked={this.state.pconsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {expButton}\n          {partButton}\n        </div>\n      </div>\n     );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Reminder.css\";\n\nimport { playSound, log } from \"../helpers\";\n\nclass Reminder extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  reminder = () => {\n    // Remind user to vocalize their actions\n    playSound(\"Please remember to describe what you are doing as you perform each step.\");\n\n    // Log reminder clicked\n    var action = \"Reminder clicked.\";\n    log(action, this.props.startTime, this.props.foldername);\n  }\n\n  render() {\n    return (\n      <div className=\"bottom-right mr-3 mb-3\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-xs-6\">\n              <button onClick={this.reminder} className=\"btn btn-dark\">\n                <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-bell-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill=\"light-gray\" d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"/>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Reminder;","import React, { Component, useRef } from \"react\";\nimport Reminder from \"../Reminder/Reminder\"\nimport \"../../App.css\";\nimport \"./Questions.css\";\n\nimport { playSound, log } from \"../helpers\";\n\n\nclass Questions extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      edit: false\n    };\n  }\n\n  handleChange = (index, event) => {\n    // Update questions\n    let items = [...this.state.questions];\n    items[index] = event.target.value;\n\n    this.setState({\n      questions: items\n    });\n  }\n\n  handleClick = (index, i, event) => {\n    var question = this.props.procedure[i].questions[index][0];\n    var answer = this.props.procedure[i].questions[index][1];\n\n    // Insert data to database (i.e. log data)\n    var action = `P${i + 1}Q${index + 1}: ${question}`;\n    log(action, this.props.startTime, this.props.foldername);\n\n    // Play sound of answer\n    playSound(answer);\n  }\n\n  handleUnanswerable = () => {\n    // Insert data to database (i.e. log data)\n    var action = `P${this.props.step + 1}Q: Unanswerable`;\n    log(action, this.props.startTime, this.props.foldername);\n  }\n\n  reminder = () => {\n    console.log(\"hello\")\n    // Remind user to vocalize their actions\n    playSound(\"Please remember to describe what you are doing as you perform each step.\");\n\n    // Log reminder clicked\n    var action = \"Reminder clicked.\";\n    log(action, this.props.startTime, this.props.foldername);\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  setRef = (ref) => {\n    this.props.updateQRefs(ref);\n  }\n\n  renderQuestions = (step, i) => {\n    return (\n    <div\n      key={`${i}`}\n      className={`${(this.props.step >= 0 && this.props.procedure[i].questions.length > 0) ? 'question-box' : ''}`} \n      style={{backgroundColor: `#${this.props.colors[i]}`}}>\n      {step.map((question, index) => \n        <button key={`${i}${index}`}\n                ref={this.setRef} \n                onClick={this.handleClick.bind(this, index, i)} \n                type=\"button\"\n                className={`btn btn-light btn-block question ${(this.props.step < 0) ? 'none' : ''}`}>Q{index + 1}: {question[0]}\n        </button>\n      )}\n      <button onClick={this.handleUnanswerable} type=\"button\" className={`btn btn-light btn-block question ${(this.props.step < 0) ? 'none' : ''}`}>Unanswerable</button>\n    </div>\n    )\n  }\n\n  render() {\n    // Wait for procedure to load\n    var procedure = [];\n    var questions = [];\n\n    for (let i = 0; i < this.props.procedure.length; i++) {\n      questions.push(this.props.procedure[i].questions);\n    }\n\n    if (this.props.procedure.length > 0 && this.props.step >= 0) {\n      procedure = this.props.procedure[this.props.step].questions;\n    }\n\n    return (\n      <div className=\"container full-height mt-2\">\n        <h2 className=\"text-center\">Questions</h2>\n        <hr/>\n\n        {/* Questions */}\n        <div className=\"list-group\">\n          {questions.map((step, i) => {\n            return this.renderQuestions(step, i); \n            }\n          )}\n        </div>\n        \n        {/* Reminder Button */}\n        <Reminder startTime={this.props.startTime} foldername={this.props.foldername}></Reminder>\n        \n        {/* <div className=\"bottom-right\">\n          <span><b>Experimenter #: </b>{localStorage.getItem(\"currentEnum\")}</span>\n          <br/>\n          <span><b>Participant #: </b>{localStorage.getItem(\"currentPnum\")}</span>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default Questions;","var mediaRecorder = {};\nvar chunks = [];\n\nexport function startAudioRecording() {\n  // Ensure getUserMedia is supported\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n    navigator.mediaDevices.getUserMedia (\n      {\n        audio: true\n      })\n\n      // Success callback, start recording\n      .then((stream) => startRecording(stream))\n\n      // Error callback\n      .catch(function(err) {\n        console.log('The following getUserMedia error occured: ' + err);\n      }\n    );\n  } else {\n    console.log('getUserMedia not supported on your browser!');\n  }\n}\n\nfunction startRecording(stream) {\n  // Start recording\n  mediaRecorder = new MediaRecorder(stream);\n  mediaRecorder.start(10);\n\n  // Start visualizing audio\n  // visualize(stream);\n\n  console.log(\"recorder started\");\n\n  mediaRecorder.ondataavailable = function(e) {\n    chunks.push(e.data);\n  }\n}\n\nexport function stopAudioRecording(filename, foldername) {\n  // Stop recording\n  mediaRecorder.stop();\n  console.log(mediaRecorder.state);\n  console.log(\"recorder stopped\");\n  mediaRecorder.onstop = (e) => stopRecording(e, filename, foldername);\n}\n\nfunction stopRecording(e, filename, foldername) {\n  // Stop and save the recording\n  console.log(\"recorder onstopped\");\n  const blob = new Blob(chunks, { 'type' : 'audio/wav; codecs=0' });\n  \n  // Package the data\n  var fd = new FormData();\n  fd.append(\"filename\", filename);\n  fd.append(\"foldername\", foldername);\n  fd.append(\"pnum\", localStorage.getItem(\"currentPnum\"));\n  fd.append(\"audio\", blob);\n\n  // Send audio blob to server\n  fetch('/api/audio', {\n    method: 'POST',\n    body: fd,\n  })\n  .then(response => response.json())\n  .then(result => {\n    // Print result\n    console.log(result);\n  });\n\n  /*\n  // Format data to send to server (using base64 encoding)\n  var reader = new FileReader();\n  reader.readAsDataURL(blob);\n  reader.onload = function(event) {\n    var base64AudioMessage = event.target.result.split(',')[1];\n\n    // Send audio blob to server\n    fetch('/api/audio', {\n      method: 'POST',\n      body: JSON.stringify({\n        filename: 'hello.wav',\n        audiostring: base64AudioMessage\n      }),\n      headers: new Headers({ 'content-type': 'application/json' })\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n  */\n\n  chunks = [];\n\n  /*\n  const clipName = prompt('Enter a name for your sound clip');\n\n  const clipContainer = document.createElement('article');\n  const clipLabel = document.createElement('p');\n  const audio = document.createElement('audio');\n  const deleteButton = document.createElement('button');\n    \n  const soundClips = document.querySelector('.sound-clips');    \n\n  clipContainer.classList.add('clip');\n  audio.setAttribute('controls', '');\n  deleteButton.innerHTML = \"Delete\";\n  clipLabel.innerHTML = clipName;\n\n  clipContainer.appendChild(audio);\n  clipContainer.appendChild(clipLabel);\n  clipContainer.appendChild(deleteButton);\n  soundClips.appendChild(clipContainer);\n\n  audio.controls = true;\n  const blob = new Blob(chunks, { 'type' : 'audio/wav;' });\n  \n  chunks = [];\n  const audioURL = window.URL.createObjectURL(blob);\n  audio.src = audioURL;\n\n  deleteButton.onclick = function(e) {\n    let evtTgt = e.target;\n    evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n  }\n  */\n}\n\nfunction visualize(stream) {\n  // Visualize audio stream\n  const canvas = document.querySelector('.visualizer');\n  const canvasCtx = canvas.getContext(\"2d\");\n  let audioCtx;\n\n  if(!audioCtx) {\n    audioCtx = new AudioContext();\n  }\n\n  const source = audioCtx.createMediaStreamSource(stream);\n\n  const analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 2048;\n  const bufferLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n\n  source.connect(analyser);\n  //analyser.connect(audioCtx.destination);\n\n  draw()\n\n  function draw() {\n    const WIDTH = canvas.width\n    const HEIGHT = canvas.height;\n\n    requestAnimationFrame(draw);\n\n    analyser.getByteTimeDomainData(dataArray);\n\n    canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n\n    canvasCtx.beginPath();\n\n    let sliceWidth = WIDTH * 1.0 / bufferLength;\n    let x = 0;\n\n\n    for(let i = 0; i < bufferLength; i++) {\n\n      let v = dataArray[i] / 128.0;\n      let y = v * HEIGHT/2;\n\n      if(i === 0) {\n        canvasCtx.moveTo(x, y);\n      } else {\n        canvasCtx.lineTo(x, y);\n      }\n\n      x += sliceWidth;\n    }\n\n    canvasCtx.lineTo(canvas.width, canvas.height/2);\n    canvasCtx.stroke();\n\n  }\n}\n\n  // Convert an AudioBuffer to a Blob using WAVE representation\n  // https://www.russellgood.com/how-to-convert-audiobuffer-to-audio-file/\n  function bufferToWave(abuffer, len) {\n    var numOfChan = abuffer.numberOfChannels,\n        length = len * numOfChan * 2 + 44,\n        buffer = new ArrayBuffer(length),\n        view = new DataView(buffer),\n        channels = [], i, sample,\n        offset = 0,\n        pos = 0;\n\n    // write WAVE header\n    setUint32(0x46464952);                         // \"RIFF\"\n    setUint32(length - 8);                         // file length - 8\n    setUint32(0x45564157);                         // \"WAVE\"\n\n    setUint32(0x20746d66);                         // \"fmt \" chunk\n    setUint32(16);                                 // length = 16\n    setUint16(1);                                  // PCM (uncompressed)\n    setUint16(numOfChan);\n    setUint32(abuffer.sampleRate);\n    setUint32(abuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\n    setUint16(numOfChan * 2);                      // block-align\n    setUint16(16);                                 // 16-bit (hardcoded in this demo)\n\n    setUint32(0x61746164);                         // \"data\" - chunk\n    setUint32(length - pos - 4);                   // chunk length\n\n    // write interleaved data\n    for(i = 0; i < abuffer.numberOfChannels; i++)\n    channels.push(abuffer.getChannelData(i));\n\n    while(pos < length) {\n    for(i = 0; i < numOfChan; i++) {             // interleave channels\n        sample = Math.max(-1, Math.min(1, channels[i][offset])); // clamp\n        sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767)|0; // scale to 16-bit signed int\n        view.setInt16(pos, sample, true);          // write 16-bit sample\n        pos += 2;\n    }\n    offset++                                     // next source sample\n    }\n\n    // create Blob\n    return new Blob([buffer], {type: \"audio/wav\"});\n\n    function setUint16(data) {\n    view.setUint16(pos, data, true);\n    pos += 2;\n    }\n\n    function setUint32(data) {\n    view.setUint32(pos, data, true);\n    pos += 4;\n    }\n}\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Procedure.css\";\nimport { getCurrentTime, getTodaysDate, playSound, logData, log, playBeep } from \"../helpers\";\nimport { startAudioRecording, stopAudioRecording } from \"../audio\";\n\nclass Procedure extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      ended: false,\n      edit: false,\n      isRecording: false,\n      index: 0,\n    };\n    this.qPos = [];\n    this.prevClicked = null;\n  }\n\n  inputChange = (index, event) => {\n    // Update procedure\n    let items = [...this.props.procedure];\n    items[index] = event.target.value;\n\n    this.setState({\n      procedure: items\n    });\n  }\n\n  procedureClick = (index, event) => {\n    // Ensure procedure has started\n    if (!this.state.started) {\n      return;\n    }\n\n    // Change background color\n    event.target.style.background = `#${this.props.colors[index]}`;\n    if (this.prevClicked) this.prevClicked.style.background = \"white\";\n    this.prevClicked = event.target;\n\n    // Update step\n    this.props.updateStep(index);\n\n    // Insert data to database (i.e log data)\n    let action = `P${index + 1}: ${this.props.procedure[index].procedure}`;\n    log(action, this.props.startTime, this.props.foldername);\n\n    // Play sound\n    playSound(this.props.procedure[index].procedure);\n\n    // Stop recording\n    if (this.state.started) {\n      // Determine filename\n      var date = getTodaysDate();\n      var time = getCurrentTime().replace(/:/g, '');;\n      var expnum = localStorage.getItem(\"currentEnum\");\n      var pnum = localStorage.getItem(\"currentPnum\");\n\n      var filename = `${this.props.foldername}-${this.state.index}`;\n      stopAudioRecording(filename, this.props.foldername);\n\n      this.setState({\n        isRecording: false\n      });\n    }\n\n    if (index < this.props.procedure.length) {\n      startAudioRecording();\n      this.setState({\n        isRecording: true\n      });\n\n      this.scrollToQuestion(index);\n    }\n    else {\n      // Log end to database\n      let action = \"Procedure ended.\";\n      log(action, this.props.startTime, this.props.foldername);\n    }\n\n    // Increment index\n    this.setState({\n      index: this.state.index + 1\n    });\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  export = () => {\n    if (this.state.isRecording) {\n      // Determine filename\n      var date = getTodaysDate();\n      var time = getCurrentTime().replace(/:/g, '');;\n      var expnum = localStorage.getItem(\"currentEnum\");\n      var pnum = localStorage.getItem(\"currentPnum\");\n\n      var filename = `${this.props.foldername}-${this.state.index}`;\n      stopAudioRecording(filename, this.props.foldername);\n      \n      // Log end to database\n      let action = \"Procedure ended.\";\n      log(action, this.props.startTime, this.props.foldername);\n\n      this.setState({\n        isRecording: false\n      })\n    }\n\n    // Wait 1 second before export\n    setTimeout( () => {\n      // Export data\n      fetch('/api/export', {\n        method: 'POST',\n        body: JSON.stringify({\n          foldername: this.props.foldername,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n      .then(response => response.blob())\n      .then(blob => {\n        // Download Zip file\n        var url = window.URL.createObjectURL(blob);\n        var a = document.createElement('a');\n        a.href = url;\n        a.download = `${this.props.foldername}.zip`;\n        document.body.appendChild(a); \n        a.click();    \n        a.remove();  \n      });\n\n      // User must restart to use the app again\n      this.setState({\n        started: false\n      });\n    }, 1000);\n  }\n\n  startProcedure = () => {\n    this.setState({\n      started: true\n    })\n\n    // Start recording\n    startAudioRecording();\n\n    // Determine the index of questions\n    var index = 0;\n    this.qPos.push(1);\n    for (let i = 0; i < this.props.procedure.length; i++) {\n      index += this.props.procedure[i].questions.length;\n      this.qPos.push(index);\n    }\n  \n    // Log start to database\n    let action = \"Procedure started.\";\n    log(action, \"start\", this.props.foldername);\n\n    // Update start time\n    let startTime = new Date();\n    this.props.updateStartTime(startTime);\n\n    // Update step\n    this.props.updateStep(0);\n    \n    // Change background of first element\n    document.getElementById('l0').style.background = `#${this.props.colors[0]}`;\n    this.prevClicked = document.getElementById('l0');\n    \n    // Play initial beep sound\n    playBeep();\n\n    // Wait 2 seconds before playing procedure audio \n    setTimeout( () => {\n      // Insert data to database (i.e log data)\n      action = `P${this.props.step + 1}: ${this.props.procedure[this.props.step].procedure}`;\n      log(action, this.props.startTime, this.props.foldername);\n\n      // Play procedure step\n      playSound(this.props.procedure[0].procedure);\n\n    }, 2000);\n  }\n\n  changeBackground = (i, e) => {\n    e.target.style.background = `#${this.props.colors[i]}`;\n  }\n\n  resetBackground = (i, e) => {\n    if (e.target !== this.prevClicked) {\n      e.target.style.background = \"white\";\n    }\n  }\n\n  scrollToQuestion = (i) => {\n    var index = this.qPos[i];\n    if (index < this.props.qRefs.length) {\n      this.props.qRefs[index].scrollIntoView({ block: 'start',  behavior: 'smooth' });\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"full-height mt-2\">\n        <h2 className=\"text-white text-center\">Procedure</h2>\n        <hr/>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <div className=\"list-group mt-2 mb-5 procedure-list\">\n                <button onClick={this.startProcedure} id='start' className={`btn-block procedure`}>Click <b>here</b> to begin the procedure recording. </button>\n                {this.props.procedure.map((step, i) => \n                  <button key={i} \n                      onClick={this.procedureClick.bind(this, i)} \n                      id={'l' + i} \n                      disabled={!this.state.started}\n                      onMouseOver={this.changeBackground.bind(this, i)}\n                      onMouseOut={this.resetBackground.bind(this, i)}\n                      style={{borderColor: `#${this.props.colors[i]}`}}\n                      className={`btn-block procedure ${(this.props.step === i && this.state.started) ? '' : ''} ${(!this.state.started) ? 'disabled' : ''}`}>\n                        {step.procedure}\n                  </button>\n                )}\n                <button onClick={this.export} id='start' \n                    className={`btn-block procedure ${(!this.state.started) ? 'list-group-item-secondary disabled' : ''}`}>\n                      Click <b>here</b> to end procedure recording and download data. \n                </button>\n              </div>            \n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Procedure;","import React, { Component } from \"react\";\nimport Questions from '../Questions/Questions'\nimport Procedure from '../Procedure_V2/Procedure'\nimport './Home.css';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      procedure: [],\n      startTime: 0,\n      step: -1\n    }\n    this.colors = [\"F47C7C\", \"F7F48B\", \"A1DE93\", \"8DA290\", \"70A1D7\", \"B399D4\", \"E1B894\", \"58949C\", \"B3A580\", \"E18AAA\"];\n  }\n\n  getProcedure = () => {\n    // Get a list of procedures\n    fetch('/api/procedure')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        procedure: data\n      });\n    })\n  }\n\n  updateStartTime = (startTime) => {\n    this.setState({\n      startTime: startTime\n    });\n  }\n\n  updateStep = (step) => {\n    this.setState({\n      step: step\n    });\n  }\n\n  incrementStep = () => {\n    this.setState({\n      step: (this.state.step + 1) % this.state.procedure.length\n    });\n  }\n\n  qRefs = [];\n  updateQRefs = (ref) => {\n    this.qRefs.push(ref);\n  }\n\n  componentDidMount() {\n    // Get procedure\n    this.getProcedure();\n  }\n\n  render() {    \n    return (\n      <div>\n        {/* Left pane (Procedure section) */}\n        <div className=\"bg-dark split left\">\n          <div>\n            <Procedure incrementStep={this.incrementStep} \n                        updateStep={this.updateStep}\n                        step={this.state.step} \n                        updateStartTime={this.updateStartTime}\n                        startTime={this.state.startTime}\n                        updateQRefs={this.updateQRefs}\n                        qRefs={this.qRefs}\n                        colors={this.colors}\n                        procedure={this.state.procedure} \n                        foldername={this.props.location.state.foldername}>\n            </Procedure>\n          </div>\n        </div>\n\n        {/* Right pane (Questions sections) */}\n        <div className=\"bg-light split right\">\n          <div>\n            <Questions incrementStep={this.incrementStep} \n                        updateStep={this.updateStep}\n                        step={this.state.step} \n                        updateStartTime={this.updateStartTime}\n                        startTime={this.state.startTime}\n                        updateQRefs={this.updateQRefs}\n                        qRefs={this.qRefs}\n                        colors={this.colors}\n                        procedure={this.state.procedure}\n                        foldername={this.props.location.state.foldername}>\n            </Questions>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport Login from './Components/Login/Login'\nimport Home from './Components/Home/Home'\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './history';\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/Home\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}