{"version":3,"sources":["Components/Login/SmashLab.png","Components/helpers.js","history.js","Components/Reminders/Reminders.js","Components/Login/Login.js","Components/Reminder/Reminder.js","Components/Questions/Questions.js","Components/audio.js","Components/Procedure_V2/Procedure.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","voices","voice","history","Reminders","props","getReminders","fetch","then","response","json","data","reminders","clicked","i","length","setState","reminderClick","index","event","clickedCopy","state","this","className","map","step","key","onClick","bind","type","done","disabled","every","Boolean","toggle","Component","playSound","sound","toLowerCase","includes","replace","window","speechSynthesis","cancel","msg","SpeechSynthesisUtterance","undefined","onvoiceschanged","rate","speak","log","action","startTime","foldername","method","body","JSON","stringify","headers","console","logData","abs_timestamp","getCurrentTime","rel_timestamp","timeDiff","Date","secs","hours","Math","floor","minutes","seconds","formatSeconds","round","getTimeElapsed","getTodaysDate","today","day","getDate","month","getMonth","year","getFullYear","time","toLocaleString","timeZone","slice","lastIndexOf","substring","getVoices","Login","handleChange","userEnum","target","value","name","parse","localStorage","getItem","econsent","econsented","handleExperimenterConsent","handleParticipantConsent","pconsent","experimenterReady","enums","enum","push","setItem","eready","etime","toggleReminders","remindersDone","pnum","participantReady","session_id","ptime","result","filename","edit","expButton","partButton","trim","id","src","SmashLab","alt","onChange","placeholder","required","autoFocus","checked","Reminder","reminder","width","height","viewBox","fill","xmlns","d","Questions","items","questions","handleClick","question","procedure","answer","handleUnanswerable","setEditMode","setRef","ref","updateQRefs","renderQuestions","style","backgroundColor","colors","mediaRecorder","chunks","startAudioRecording","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","start","ondataavailable","e","startRecording","catch","err","stopAudioRecording","stop","onstop","blob","Blob","fd","FormData","append","stopRecording","Procedure","inputChange","procedureClick","started","background","prevClicked","updateStep","isRecording","scrollToQuestion","export","setTimeout","url","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","startProcedure","qPos","updateStartTime","getElementById","Audio","play","changeBackground","resetBackground","qRefs","scrollIntoView","block","behavior","ended","onMouseOver","onMouseOut","borderColor","Home","getProcedure","incrementStep","location","App","path","exact","component","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5cd8c6ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SmashLab.17d6023a.png\";","// Wait for voices to load\nvar voices;\nvar voice;\nwindow.speechSynthesis.onvoiceschanged = function() {\n  voices = window.speechSynthesis.getVoices();\n  // Find appropriate voice\n  for (let i = 0; i < voices.length; i++) {\n    if (voices[i][\"name\"] === \"Google US English\") voice = i;\n  }\n};\n\nexport function insertToDatabase(db, table, data) {\n  var transaction = db.transaction([table], \"readwrite\");\n\n  transaction.oncomplete = function(event) {\n    console.log(\"All done!\");\n  };\n\n  transaction.onerror = function(event) {\n    // Generic error handler for all errors targeted at this database's request\n    console.error(\"Database error: \" + event.target.errorCode);    \n  };\n\n  var objectStore = transaction.objectStore(table);\n  var request = objectStore.add(data);\n  request.onsuccess = function(event) {\n  }\n}\n\nexport function databaseGetAll(db) {\n  var transaction = db.transaction('log', 'readonly');\n  var objectStore = transaction.objectStore('log');\n  objectStore.getAll().onsuccess = function(event) {\n    return event.target.result\n  };\n}\n\nexport function playSound(sound) {\n  // Hard-code phonetics\n  sound = sound.toLowerCase();\n  if (sound.includes(\"vaseline\")) {\n    sound = sound.replace(\"vaseline\", \"vaselleen\");\n  }\n  if (sound.includes(\"wound\")) {\n    sound = sound.replace(\"wound\", \"woond\");\n  }\n\n  window.speechSynthesis.cancel();\n\n  var msg = new SpeechSynthesisUtterance(sound);\n\n  if (typeof speechSynthesis !== 'undefined' && speechSynthesis.onvoiceschanged !== undefined) {\n    msg.voice = voices[voice]; // \"Google US English\"\n    msg.rate = 0.75;\n    window.speechSynthesis.speak(msg);\n  }\n}\n\nexport function playBeep() {\n  var beep = new Audio(\"beep.mp3\");\n  beep.play();\n}\n\nexport function logData(log) {\n  // Send log to server\n  fetch('/api/log', {\n    method: 'POST',\n    body: JSON.stringify(log),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n  })\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n  });\n}\n\nexport function log(action, startTime, foldername) {\n  // Log action to database\n  var abs_timestamp = getCurrentTime();\n  var rel_timestamp = (startTime === \"start\") ? \"00:00:00\" : getTimeElapsed(startTime);\n  var data = {foldername: foldername, abs_timestamp: abs_timestamp, rel_timestamp: rel_timestamp, action: action};\n  logData(data);\n}\n\nexport function formatSeconds(secs) {\n  var hours   = Math.floor(secs / 3600);\n  var minutes = Math.floor((secs - (hours * 3600)) / 60);\n  var seconds = secs - (hours * 3600) - (minutes * 60);\n\n  if (hours   < 10) {hours   = \"0\"+hours;}\n  if (minutes < 10) {minutes = \"0\"+minutes;}\n  if (seconds < 10) {seconds = \"0\"+seconds;}\n  return (hours+':'+minutes+':'+seconds);\n}\n\nexport function getTimeElapsed(startTime) {\n  var endTime = new Date();\n  var timeDiff = endTime - startTime;\n  timeDiff /= 1000;\n\n  return formatSeconds(Math.round(timeDiff));\n}\n\nexport function getTodaysDate() {\n  var today = new Date();\n  var day = today.getDate();\n  var month = (today.getMonth() < 10) ? `0${today.getMonth() + 1}` : (today.getMonth() + 1);\n  var year = today.getFullYear();\n  var date = `${month}${day}${year}`;\n  return date;\n}\n\nexport function getCurrentTime() {\n  var time = new Date().toLocaleString(\"en-US\", {timeZone: \"America/New_York\"});\n  time = time.slice(time.lastIndexOf(',') + 2);;\n  time = time.substring(0, time.length - 3);\n  return time;\n}","import { createBrowserHistory as history} from 'history';\n\nexport default history();","import React, { Component } from \"react\";\nimport './Reminders.css';\n\nclass Reminders extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      reminders: [],\n      clicked: []\n    };\n  }\n\n  getReminders = () => {\n    // Get a list of reminders\n    fetch('/api/reminders')\n    .then(response => response.json())\n    .then(data => {\n      var reminders = data['reminders'];\n\n      // Initialize clicked list\n      var clicked = [];\n      for (let i = 0; i < reminders.length; i++) {\n        clicked[i] = false;\n      }\n      this.setState({\n        reminders: reminders,\n        clicked: clicked\n      });\n    })\n  }\n\n  reminderClick = (index, event) => {\n    // Update clicked list\n    var clickedCopy = [...this.state.clicked];\n    clickedCopy[index] = !clickedCopy[index];\n    this.setState({\n      clicked: clickedCopy\n    });\n  }\n\n  componentDidMount() {\n    // Get procedure\n    this.getReminders();\n  }\n\n  render() {\n    return (\n      <div >\n        <div className=\"my-modal d-flex align-items-center\">\n          <div className=\"content\">\n          <div className=\"card\">\n            <h5 className=\"card-header\">Mohs Experiment Reminders</h5>\n            <div className=\"card-body\">      \n              <ul className=\"todoList\">\n                {this.state.reminders.map((step, i) =>\n                <li key={i} className={`todoItem ${(this.state.clicked[i]) ? 'completed' : ''}`} onClick={this.reminderClick.bind(this, i)}><span>{step}</span></li>\n                )}\n              </ul>\n              <button type=\"button\" className=\"btn btn-primary float-right done-button\" onClick={this.props.done} disabled={!this.state.clicked.every(Boolean)}>Done</button>\n              <button type=\"button\" className=\"btn btn-secondary float-right done-button\" onClick={this.props.toggle}>Close</button>\n            </div>\n          </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Reminders;","import React, { Component } from 'react';\nimport SmashLab from './SmashLab.png'\nimport './Login.css';\nimport history from '../../history';\nimport Reminders from '../Reminders/Reminders';\nimport { getCurrentTime, getTodaysDate } from \"../helpers\";\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pnum: \"\",\n      enum: \"\",\n      etime: \"\",\n      filename: \"\",\n      session_id: \"\",\n      eready: false,\n      econsent: false,\n      econsented: false,\n      pconsent: false,\n      reminders: false,\n      edit: false\n    };\n    this.foldername = \"\";\n  }\n\n  componentDidMount() {\n    // Get current session_id number\n    fetch('/api/session_id')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        session_id: data[\"session_id\"]\n      });\n    })\n  }\n\n  handleChange = (event) => {\n    const userEnum = event.target.value;\n    this.setState({\n      [event.target.name]: userEnum\n    });\n    \n    // Lookup Experimenter in LocalStorage\n    if (event.target.name === \"enum\") {\n      var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n      if (enums.includes(event.target.value)) {\n        this.setState({\n          econsent: true\n        })\n      }\n      else if (!this.state.econsented) {\n        this.setState({\n          econsent: false\n        })\n      }\n    }\n  }\n\n  // Handle Experimenter checkbox\n  handleExperimenterConsent = () => {\n    this.setState({\n      econsent: !this.state.econsent,\n      econsented: true\n    });\n  }\n\n  // Handle Participant checkbox\n  handleParticipantConsent = () => {\n    this.setState({\n      pconsent: !this.state.pconsent,\n    });\n  }\n\n  experimenterReady = () => {\n    // Insert enum into LocalStorage\n    var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n    if (!enums.includes(this.state.enum)) {\n      enums.push(this.state.enum);\n      localStorage.setItem(\"enums\", JSON.stringify(enums));\n    }\n      \n    this.setState ({\n      eready: true,\n      etime: getCurrentTime()\n    });\n  }\n\n  toggleReminders = () => {\n    // Reminders popup \n    this.setState({\n      reminders: !this.state.reminders\n    });\n  }\n\n  remindersDone = () => {\n    history.push('/Home', {pnum: this.state.pnum, foldername: this.foldername});\n  }\n\n  participantReady = () => {\n    // Store current Participant Number in LocalStorage\n    localStorage.setItem(\"currentPnum\", this.state.pnum);\n\n    // Store current Experimenter Number in LocalStorage\n    localStorage.setItem(\"currentEnum\", this.state.enum);\n\n    // Deteremine filename\n    var time = getCurrentTime().replace(/:/g, '');\n    this.foldername = `${time}_${this.state.enum}_${this.state.pnum}_${this.state.session_id}`;\n\n    // Inform the server about the Participant Number\n    fetch('/api/pnum', {\n      method: 'POST',\n      body: JSON.stringify({\n        foldername: this.foldername,\n        pnum: this.state.pnum,\n        etime: this.state.etime,\n        ptime: getCurrentTime()\n      }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n\n    // Update session_id number\n    fetch('/api/session_id', {\n      method: 'POST',\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n\n    // Toggle reminders popup\n    this.toggleReminders();\n  }\n\n  render() {\n\n    const isValidLogin = !(this.state.pnum.trim() === \"\" || this.state.enum.trim() === \"\" || !this.state.econsent || !this.state.pconsent);\n    let expButton, partButton;\n    if (isValidLogin) {\n      expButton = <button id=\"eready\" onClick={this.experimenterReady} className=\"btn btn-lg btn-primary btn-block\">Experimenter Ready</button>;\n    }\n    else {\n      expButton = \"\";\n    }\n\n    if (this.state.eready) {\n      partButton = <button id=\"pready\" onClick={this.participantReady} className=\"btn btn-lg btn-info btn-block\" type=\"submit\">Participant Ready</button>;\n    }\n    else {\n      partButton = \"\";\n    }\n\n    return (\n      <div className=\"login text-center\">\n        <div className=\"form-signin\">\n          <img className=\"mb-4 smash_logo\" src={SmashLab} alt=\"Smash Lab\" />\n          <h1 className=\"h3 font-weight-normal\">Please sign in</h1>\n          {/* Session_ID Number */}\n          <div className=\"mb-4\">\n            <p className=\"h5\">Session ID: {this.state.session_id}</p>\n          </div>\n\n          {/* Experimenter Input Group */}\n          <div className=\"input-group mb-2\">\n            <input onChange={this.handleChange} type=\"text\" name=\"enum\" id=\"inputEnum\" className=\"form-control\" placeholder=\"Experimenter number\" value={this.state.enum} required autoFocus />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleExperimenterConsent} type=\"checkbox\" value=\"econsent\" checked={this.state.econsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {/* Participant Input Group */}\n          <div className=\"input-group mb-3\">\n            <input onChange={this.handleChange} type=\"text\" name=\"pnum\" id=\"inputPnum\" className=\"form-control\" placeholder=\"Participant Number\" value={this.state.pnum} required />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleParticipantConsent} type=\"checkbox\" value=\"pconsent\" checked={this.state.pconsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {expButton}\n          {partButton}\n\n          {this.state.reminders ? <Reminders toggle={this.toggleReminders} done={this.remindersDone}/> : null}\n\n        </div>\n      </div>\n     );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Reminder.css\";\n\nimport { playSound, log } from \"../helpers\";\n\nclass Reminder extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  reminder = () => {\n    // Remind user to vocalize their actions\n    playSound(\"Please remember to describe what you are doing as you perform each step.\");\n\n    // Log reminder clicked\n    var action = \"Reminder clicked.\";\n    log(action, this.props.startTime, this.props.foldername);\n  }\n\n  render() {\n    return (\n      <div className=\"bottom-right mr-3 mb-3\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-xs-6\">\n              <button onClick={this.reminder} className=\"btn btn-dark\">\n                <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-bell-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill=\"light-gray\" d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"/>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Reminder;","import React, { Component, useRef } from \"react\";\nimport Reminder from \"../Reminder/Reminder\"\nimport \"../../App.css\";\nimport \"./Questions.css\";\n\nimport { playSound, log } from \"../helpers\";\n\n\nclass Questions extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      edit: false\n    };\n  }\n\n  handleChange = (index, event) => {\n    // Update questions\n    let items = [...this.state.questions];\n    items[index] = event.target.value;\n\n    this.setState({\n      questions: items\n    });\n  }\n\n  handleClick = (index, i, event) => {\n    var question = this.props.procedure[i].questions[index][0];\n    var answer = this.props.procedure[i].questions[index][1];\n\n    // Insert data to database (i.e. log data)\n    var action = `P${i + 1}Q${index + 1}: ${question}`;\n    log(action, this.props.startTime, this.props.foldername);\n\n    // Play sound of answer\n    playSound(answer);\n  }\n\n  handleUnanswerable = () => {\n    // Insert data to database (i.e. log data)\n    var action = `P${this.props.step + 1}Q: Unanswerable`;\n    log(action, this.props.startTime, this.props.foldername);\n  }\n\n  reminder = () => {\n    // Remind user to vocalize their actions\n    playSound(\"Please remember to describe what you are doing as you perform each step.\");\n\n    // Log reminder clicked\n    var action = \"Reminder clicked.\";\n    log(action, this.props.startTime, this.props.foldername);\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  setRef = (ref) => {\n    this.props.updateQRefs(ref);\n  }\n\n  renderQuestions = (step, i) => {\n    return (\n    <div\n      key={`${i}`}\n      className={`${(this.props.step >= 0) ? 'question-box' : ''}`} \n      style={{backgroundColor: `#${this.props.colors[i]}`}}>\n      {step.map((question, index) => \n        <button key={`${i}${index}`}\n                ref={this.setRef} \n                onClick={this.handleClick.bind(this, index, i)} \n                type=\"button\"\n                className={`btn btn-light btn-block question ${(this.props.step < 0) ? 'none' : ''}`}>Q{index + 1}: {question[0]}\n        </button>\n      )}\n      <button onClick={this.handleUnanswerable} type=\"button\" className={`btn btn-light btn-block question ${(this.props.step < 0) ? 'none' : ''}`}>Unanswerable</button>\n    </div>\n    )\n  }\n\n  render() {\n    // Wait for procedure to load\n    var procedure = [];\n    var questions = [];\n\n    for (let i = 0; i < this.props.procedure.length; i++) {\n      questions.push(this.props.procedure[i].questions);\n    }\n\n    if (this.props.procedure.length > 0 && this.props.step >= 0) {\n      procedure = this.props.procedure[this.props.step].questions;\n    }\n\n    return (\n      <div className=\"container full-height mt-2\">\n        <h2 className=\"text-center\">Questions</h2>\n        <hr/>\n\n        {/* Questions */}\n        <div className=\"list-group mb-4\">\n          {questions.map((step, i) => {\n            return this.renderQuestions(step, i); \n            }\n          )}\n        </div>\n        \n        {/* Reminder Button */}\n        <Reminder startTime={this.props.startTime} foldername={this.props.foldername}></Reminder>\n        \n        {/* <div className=\"bottom-right\">\n          <span><b>Experimenter #: </b>{localStorage.getItem(\"currentEnum\")}</span>\n          <br/>\n          <span><b>Participant #: </b>{localStorage.getItem(\"currentPnum\")}</span>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default Questions;","var mediaRecorder = {};\nvar chunks = [];\n\nexport function startAudioRecording() {\n  // Ensure getUserMedia is supported\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n    navigator.mediaDevices.getUserMedia (\n      {\n        audio: true\n      })\n\n      // Success callback, start recording\n      .then((stream) => startRecording(stream))\n\n      // Error callback\n      .catch(function(err) {\n        console.log('The following getUserMedia error occured: ' + err);\n      }\n    );\n  } else {\n    console.log('getUserMedia not supported on your browser!');\n  }\n}\n\nfunction startRecording(stream) {\n  // Start recording\n  mediaRecorder = new MediaRecorder(stream);\n  mediaRecorder.start(10);\n\n  // Start visualizing audio\n  // visualize(stream);\n\n  console.log(\"recorder started\");\n\n  mediaRecorder.ondataavailable = function(e) {\n    chunks.push(e.data);\n  }\n}\n\nexport function stopAudioRecording(filename, foldername) {\n  // Stop recording\n  mediaRecorder.stop();\n  console.log(mediaRecorder.state);\n  console.log(\"recorder stopped\");\n  mediaRecorder.onstop = (e) => stopRecording(e, filename, foldername);\n}\n\nfunction stopRecording(e, filename, foldername) {\n  // Stop and save the recording\n  console.log(\"recorder onstopped\");\n  const blob = new Blob(chunks, { 'type' : 'audio/wav; codecs=0' });\n  \n  // Package the data\n  var fd = new FormData();\n  fd.append(\"filename\", filename);\n  fd.append(\"foldername\", foldername);\n  fd.append(\"pnum\", localStorage.getItem(\"currentPnum\"));\n  fd.append(\"audio\", blob);\n\n  // Send audio blob to server\n  fetch('/api/audio', {\n    method: 'POST',\n    body: fd,\n  })\n  .then(response => response.json())\n  .then(result => {\n    // Print result\n    console.log(result);\n  });\n\n  /*\n  // Format data to send to server (using base64 encoding)\n  var reader = new FileReader();\n  reader.readAsDataURL(blob);\n  reader.onload = function(event) {\n    var base64AudioMessage = event.target.result.split(',')[1];\n\n    // Send audio blob to server\n    fetch('/api/audio', {\n      method: 'POST',\n      body: JSON.stringify({\n        filename: 'hello.wav',\n        audiostring: base64AudioMessage\n      }),\n      headers: new Headers({ 'content-type': 'application/json' })\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n  */\n\n  chunks = [];\n\n  /*\n  const clipName = prompt('Enter a name for your sound clip');\n\n  const clipContainer = document.createElement('article');\n  const clipLabel = document.createElement('p');\n  const audio = document.createElement('audio');\n  const deleteButton = document.createElement('button');\n    \n  const soundClips = document.querySelector('.sound-clips');    \n\n  clipContainer.classList.add('clip');\n  audio.setAttribute('controls', '');\n  deleteButton.innerHTML = \"Delete\";\n  clipLabel.innerHTML = clipName;\n\n  clipContainer.appendChild(audio);\n  clipContainer.appendChild(clipLabel);\n  clipContainer.appendChild(deleteButton);\n  soundClips.appendChild(clipContainer);\n\n  audio.controls = true;\n  const blob = new Blob(chunks, { 'type' : 'audio/wav;' });\n  \n  chunks = [];\n  const audioURL = window.URL.createObjectURL(blob);\n  audio.src = audioURL;\n\n  deleteButton.onclick = function(e) {\n    let evtTgt = e.target;\n    evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n  }\n  */\n}\n\nfunction visualize(stream) {\n  // Visualize audio stream\n  const canvas = document.querySelector('.visualizer');\n  const canvasCtx = canvas.getContext(\"2d\");\n  let audioCtx;\n\n  if(!audioCtx) {\n    audioCtx = new AudioContext();\n  }\n\n  const source = audioCtx.createMediaStreamSource(stream);\n\n  const analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 2048;\n  const bufferLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n\n  source.connect(analyser);\n  //analyser.connect(audioCtx.destination);\n\n  draw()\n\n  function draw() {\n    const WIDTH = canvas.width\n    const HEIGHT = canvas.height;\n\n    requestAnimationFrame(draw);\n\n    analyser.getByteTimeDomainData(dataArray);\n\n    canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n\n    canvasCtx.beginPath();\n\n    let sliceWidth = WIDTH * 1.0 / bufferLength;\n    let x = 0;\n\n\n    for(let i = 0; i < bufferLength; i++) {\n\n      let v = dataArray[i] / 128.0;\n      let y = v * HEIGHT/2;\n\n      if(i === 0) {\n        canvasCtx.moveTo(x, y);\n      } else {\n        canvasCtx.lineTo(x, y);\n      }\n\n      x += sliceWidth;\n    }\n\n    canvasCtx.lineTo(canvas.width, canvas.height/2);\n    canvasCtx.stroke();\n\n  }\n}\n\n  // Convert an AudioBuffer to a Blob using WAVE representation\n  // https://www.russellgood.com/how-to-convert-audiobuffer-to-audio-file/\n  function bufferToWave(abuffer, len) {\n    var numOfChan = abuffer.numberOfChannels,\n        length = len * numOfChan * 2 + 44,\n        buffer = new ArrayBuffer(length),\n        view = new DataView(buffer),\n        channels = [], i, sample,\n        offset = 0,\n        pos = 0;\n\n    // write WAVE header\n    setUint32(0x46464952);                         // \"RIFF\"\n    setUint32(length - 8);                         // file length - 8\n    setUint32(0x45564157);                         // \"WAVE\"\n\n    setUint32(0x20746d66);                         // \"fmt \" chunk\n    setUint32(16);                                 // length = 16\n    setUint16(1);                                  // PCM (uncompressed)\n    setUint16(numOfChan);\n    setUint32(abuffer.sampleRate);\n    setUint32(abuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\n    setUint16(numOfChan * 2);                      // block-align\n    setUint16(16);                                 // 16-bit (hardcoded in this demo)\n\n    setUint32(0x61746164);                         // \"data\" - chunk\n    setUint32(length - pos - 4);                   // chunk length\n\n    // write interleaved data\n    for(i = 0; i < abuffer.numberOfChannels; i++)\n    channels.push(abuffer.getChannelData(i));\n\n    while(pos < length) {\n    for(i = 0; i < numOfChan; i++) {             // interleave channels\n        sample = Math.max(-1, Math.min(1, channels[i][offset])); // clamp\n        sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767)|0; // scale to 16-bit signed int\n        view.setInt16(pos, sample, true);          // write 16-bit sample\n        pos += 2;\n    }\n    offset++                                     // next source sample\n    }\n\n    // create Blob\n    return new Blob([buffer], {type: \"audio/wav\"});\n\n    function setUint16(data) {\n    view.setUint16(pos, data, true);\n    pos += 2;\n    }\n\n    function setUint32(data) {\n    view.setUint32(pos, data, true);\n    pos += 4;\n    }\n}\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Procedure.css\";\nimport { getCurrentTime, getTodaysDate, playSound, logData, log, playBeep } from \"../helpers\";\nimport { startAudioRecording, stopAudioRecording } from \"../audio\";\n\nclass Procedure extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      ended: false,\n      edit: false,\n      isRecording: false,\n      index: 0,\n    };\n    this.qPos = [];\n    this.prevClicked = null;\n  }\n\n  inputChange = (index, event) => {\n    // Update procedure\n    let items = [...this.props.procedure];\n    items[index] = event.target.value;\n\n    this.setState({\n      procedure: items\n    });\n  }\n\n  procedureClick = (index, event) => {\n    // Ensure procedure has started\n    if (!this.state.started) {\n      return;\n    }\n\n    // Change background color\n    event.target.style.background = `#${this.props.colors[index]}`;\n    if (this.prevClicked) this.prevClicked.style.background = \"white\";\n    this.prevClicked = event.target;\n\n    // Update step\n    this.props.updateStep(index);\n\n    // Insert data to database (i.e log data)\n    let action = `P${index + 1}: ${this.props.procedure[index].procedure}`;\n    log(action, this.props.startTime, this.props.foldername);\n\n    // Play sound\n    playSound(this.props.procedure[index].procedure);\n\n    // Stop recording\n    if (this.state.started) {\n      // Determine filename\n      var date = getTodaysDate();\n      var time = getCurrentTime().replace(/:/g, '');;\n      var expnum = localStorage.getItem(\"currentEnum\");\n      var pnum = localStorage.getItem(\"currentPnum\");\n\n      var filename = `${this.props.foldername}-${this.state.index}`;\n      stopAudioRecording(filename, this.props.foldername);\n\n      this.setState({\n        isRecording: false\n      });\n    }\n\n    if (index < this.props.procedure.length) {\n      startAudioRecording();\n      this.setState({\n        isRecording: true\n      });\n\n      this.scrollToQuestion(index);\n    }\n    else {\n      // Log end to database\n      let action = \"Procedure ended.\";\n      log(action, this.props.startTime, this.props.foldername);\n    }\n\n    // Increment index\n    this.setState({\n      index: this.state.index + 1\n    });\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  export = () => {\n    if (this.state.isRecording) {\n      // Determine filename\n      var date = getTodaysDate();\n      var time = getCurrentTime().replace(/:/g, '');;\n      var expnum = localStorage.getItem(\"currentEnum\");\n      var pnum = localStorage.getItem(\"currentPnum\");\n\n      var filename = `${this.props.foldername}-${this.state.index}`;\n      stopAudioRecording(filename, this.props.foldername);\n      \n      // Log end to database\n      let action = \"Procedure ended.\";\n      log(action, this.props.startTime, this.props.foldername);\n\n      this.setState({\n        isRecording: false\n      })\n    }\n\n    // Wait 1 second before export\n    setTimeout( () => {\n      // Export data\n      fetch('/api/export', {\n        method: 'POST',\n        body: JSON.stringify({\n          foldername: this.props.foldername,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n      .then(response => response.blob())\n      .then(blob => {\n        // Download Zip file\n        var url = window.URL.createObjectURL(blob);\n        var a = document.createElement('a');\n        a.href = url;\n        a.download = `${this.props.foldername}.zip`;\n        document.body.appendChild(a); \n        a.click();    \n        a.remove();  \n      });\n\n      // User must restart to use the app again\n      this.setState({\n        started: false\n      });\n    }, 1000);\n  }\n\n  startProcedure = () => {\n    this.setState({\n      started: true\n    })\n\n    // Start recording\n    startAudioRecording();\n\n    // Determine the index of questions\n    var index = 0;\n    this.qPos.push(1);\n    for (let i = 0; i < this.props.procedure.length; i++) {\n      index += this.props.procedure[i].questions.length;\n      this.qPos.push(index);\n    }\n  \n    // Log start to database\n    let action = \"Procedure started.\";\n    log(action, \"start\", this.props.foldername);\n\n    // Update start time\n    let startTime = new Date();\n    this.props.updateStartTime(startTime);\n\n    // Update step\n    this.props.updateStep(0);\n    \n    // Change background of first element\n    document.getElementById('l0').style.background = `#${this.props.colors[0]}`;\n    this.prevClicked = document.getElementById('l0');\n\n    // Wait 1.5 seconds before beep\n    setTimeout( () => {\n      // Play initial beep sound\n      playBeep();\n    }, 1500);\n  \n    // Wait 2 seconds before playing procedure audio \n    setTimeout( () => {\n      // Insert data to database (i.e log data)\n      action = `P${this.props.step + 1}: ${this.props.procedure[this.props.step].procedure}`;\n      log(action, this.props.startTime, this.props.foldername);\n\n      // Play procedure step\n      playSound(this.props.procedure[0].procedure);\n\n    }, 2000);\n  }\n\n  changeBackground = (i, e) => {\n    e.target.style.background = `#${this.props.colors[i]}`;\n  }\n\n  resetBackground = (i, e) => {\n    if (e.target !== this.prevClicked) {\n      e.target.style.background = \"white\";\n    }\n  }\n\n  scrollToQuestion = (i) => {\n    var index = this.qPos[i];\n    if (index < this.props.qRefs.length) {\n      this.props.qRefs[index].scrollIntoView({ block: 'start',  behavior: 'smooth' });\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"full-height mt-2\">\n        <h2 className=\"text-white text-center\">Procedure</h2>\n        <hr/>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <div className=\"list-group mt-2 mb-5 procedure-list\">\n                <button onClick={this.startProcedure} id='start' className={`btn-block procedure`}>Click <b>here</b> to begin the procedure recording. </button>\n                {this.props.procedure.map((step, i) => \n                  <button key={i} \n                      onClick={this.procedureClick.bind(this, i)} \n                      id={'l' + i} \n                      disabled={!this.state.started}\n                      onMouseOver={this.changeBackground.bind(this, i)}\n                      onMouseOut={this.resetBackground.bind(this, i)}\n                      style={{borderColor: `#${this.props.colors[i]}`}}\n                      className={`btn-block procedure ${(this.props.step === i && this.state.started) ? '' : ''} ${(!this.state.started) ? 'disabled' : ''}`}>\n                        {step.procedure}\n                  </button>\n                )}\n                <button onClick={this.export} id='start' \n                    className={`btn-block procedure ${(!this.state.started) ? 'list-group-item-secondary disabled' : ''}`}>\n                      Click <b>here</b> to end procedure recording and download data. \n                </button>\n              </div>            \n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Procedure;","import React, { Component } from \"react\";\nimport Questions from '../Questions/Questions'\nimport Procedure from '../Procedure_V2/Procedure'\nimport './Home.css';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      procedure: [],\n      startTime: 0,\n      step: -1\n    }\n    this.colors = [\"F47C7C\", \"F7F48B\", \"A1DE93\", \"F2AFA3\", \"70A1D7\", \"B399D4\", \n                  \"E1B894\", \"58949C\", \"FEC8D8\", \"B3A580\", \"E18AAA\", \"8DA290\", \"DAF0EE\"];\n  }\n\n  getProcedure = () => {\n    // Get a list of procedures\n    fetch('/api/procedure')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        procedure: data['procedure']\n      });\n    })\n  }\n\n  updateStartTime = (startTime) => {\n    this.setState({\n      startTime: startTime\n    });\n  }\n\n  updateStep = (step) => {\n    this.setState({\n      step: step\n    });\n  }\n\n  incrementStep = () => {\n    this.setState({\n      step: (this.state.step + 1) % this.state.procedure.length\n    });\n  }\n\n  qRefs = [];\n  updateQRefs = (ref) => {\n    this.qRefs.push(ref);\n  }\n\n  componentDidMount() {\n    // Get procedure\n    this.getProcedure();\n  }\n\n  render() {    \n    return (\n      <div>\n        {/* Left pane (Procedure section) */}\n        <div className=\"bg-dark split left\">\n          <div>\n            <Procedure incrementStep={this.incrementStep} \n                        updateStep={this.updateStep}\n                        step={this.state.step} \n                        updateStartTime={this.updateStartTime}\n                        startTime={this.state.startTime}\n                        updateQRefs={this.updateQRefs}\n                        qRefs={this.qRefs}\n                        colors={this.colors}\n                        procedure={this.state.procedure} \n                        foldername={this.props.location.state.foldername}>\n            </Procedure>\n          </div>\n        </div>\n\n        {/* Right pane (Questions sections) */}\n        <div className=\"bg-light split right\">\n          <div>\n            <Questions incrementStep={this.incrementStep} \n                        updateStep={this.updateStep}\n                        step={this.state.step} \n                        updateStartTime={this.updateStartTime}\n                        startTime={this.state.startTime}\n                        updateQRefs={this.updateQRefs}\n                        qRefs={this.qRefs}\n                        colors={this.colors}\n                        procedure={this.state.procedure}\n                        foldername={this.props.location.state.foldername}>\n            </Questions>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport Login from './Components/Login/Login'\nimport Home from './Components/Home/Home'\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './history';\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/Home\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}