{"version":3,"sources":["Components/Login/SmashLab.png","history.js","Components/helpers.js","Components/Login/Login.js","Components/Questions/Questions.js","Components/Audio/Audio.js","Components/audio.js","Components/Procedure/Procedure.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","history","playSound","sound","toLowerCase","includes","replace","window","speechSynthesis","cancel","msg","SpeechSynthesisUtterance","rate","speak","logData","log","fetch","method","body","JSON","stringify","headers","then","response","json","data","console","getCurrentTime","Date","toLocaleString","timeZone","substr","Login","props","handleChange","event","userEnum","target","value","setState","name","parse","localStorage","getItem","econsent","state","econsented","handleExperimenterConsent","handleParticipantConsent","pconsent","experimenterReady","enums","enum","push","setItem","eready","etime","participantReady","pnum","ptime","result","edit","expButton","partButton","this","trim","id","onClick","className","type","src","SmashLab","alt","onChange","placeholder","required","autoFocus","checked","Component","Questions","index","items","questions","handleClick","question","procedure","step","timeElapsed","timestamp","action","reminder","setEditMode","length","slice","map","i","key","bind","recordTime","aria-hidden","Audio","width","height","viewBox","fill","xmlns","recording","d","fillRule","mediaRecorder","chunks","startAudioRecording","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","start","ondataavailable","e","startRecording","catch","err","stopAudioRecording","filename","stop","onstop","blob","Blob","fd","FormData","append","stopRecording","Procedure","inputChange","procedureClick","updateStep","repeat","export","url","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","done","started","incrementStep","ended","card_title","undefined","card_body","card_button","Home","getProcedure","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f1b35655.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SmashLab.17d6023a.png\";","import { createBrowserHistory as history} from 'history';\n\nexport default history();","export function insertToDatabase(db, table, data) {\n  var transaction = db.transaction([table], \"readwrite\");\n\n  transaction.oncomplete = function(event) {\n    console.log(\"All done!\");\n  };\n\n  transaction.onerror = function(event) {\n    // Generic error handler for all errors targeted at this database's request\n    console.error(\"Database error: \" + event.target.errorCode);    \n  };\n\n  var objectStore = transaction.objectStore(table);\n  var request = objectStore.add(data);\n  request.onsuccess = function(event) {\n  }\n}\n\nexport function databaseGetAll(db) {\n  var transaction = db.transaction('log', 'readonly');\n  var objectStore = transaction.objectStore('log');\n  objectStore.getAll().onsuccess = function(event) {\n    return event.target.result\n  };\n}\n\nexport function playSound(sound) {\n  // Hard-code phonetics\n  sound = sound.toLowerCase();\n  if (sound.includes(\"vaseline\")) {\n    sound = sound.replace(\"vaseline\", \"vaselleen\");\n  }\n  if (sound.includes(\"wound\")) {\n    sound = sound.replace(\"wound\", \"woond\");\n  }\n\n  window.speechSynthesis.cancel();\n  var msg = new SpeechSynthesisUtterance(sound);\n  msg.rate = 0.75;\n  window.speechSynthesis.speak(msg);\n}\n\nexport function logData(log) {\n    // Send log to server\n    fetch('/api/log', {\n      method: 'POST',\n      body: JSON.stringify(log),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n\nexport function getCurrentTime() {\n  var time = new Date().toLocaleString(\"en-US\", {timeZone: \"America/New_York\"});\n  return time.substr(11, 8);\n}","import React, { Component } from 'react';\nimport SmashLab from './SmashLab.png'\nimport './Login.css';\nimport history from '../../history';\nimport { getCurrentTime, playSound, logData } from \"../helpers\";\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pnum: \"\",\n      enum: \"\",\n      etime: \"\",\n      eready: false,\n      econsent: false,\n      econsented: false,\n      pconsent: false,\n      edit: false\n    };\n  }\n\n  handleChange = (event) => {\n    const userEnum = event.target.value;\n    this.setState({\n      [event.target.name]: userEnum\n    });\n    \n    // Lookup Experimenter in LocalStorage\n    if (event.target.name === \"enum\") {\n      var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n      if (enums.includes(event.target.value)) {\n        this.setState({\n          econsent: true\n        })\n      }\n      else if (!this.state.econsented) {\n        this.setState({\n          econsent: false\n        })\n      }\n    }\n  }\n\n  // Handle Experimenter checkbox\n  handleExperimenterConsent = () => {\n    this.setState({\n      econsent: !this.state.econsent,\n      econsented: true\n    });\n  }\n\n  // Handle Participant checkbox\n  handleParticipantConsent = () => {\n    this.setState({\n      pconsent: !this.state.pconsent,\n    });\n  }\n\n  experimenterReady = () => {\n    // Insert enum into LocalStorage\n    var enums = JSON.parse(localStorage.getItem(\"enums\") || \"[]\");\n    if (!enums.includes(this.state.enum)) {\n      enums.push(this.state.enum);\n      localStorage.setItem(\"enums\", JSON.stringify(enums));\n    }\n      \n    this.setState ({\n      eready: true,\n      etime: getCurrentTime()\n    });\n  }\n\n  participantReady = () => {\n    history.push('/Home', {pnum: this.state.pnum});\n\n    // Store current Participant Number in LocalStorage\n    localStorage.setItem(\"currentPnum\", this.state.pnum);\n\n    // Inform the server about the Participant Number\n    fetch('/api/pnum', {\n      method: 'POST',\n      body: JSON.stringify({\n        pnum: this.state.pnum,\n        etime: this.state.etime,\n        ptime: getCurrentTime()\n      }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n\n  render() {\n\n    const isValidLogin = !(this.state.pnum.trim() === \"\" || this.state.enum.trim() === \"\" || !this.state.econsent || !this.state.pconsent);\n    let expButton, partButton;\n    if (isValidLogin) {\n      expButton = <button id=\"eready\" onClick={this.experimenterReady} className=\"btn btn-lg btn-primary btn-block\">Experimenter Ready</button>;\n    }\n    else {\n      expButton = \"\";\n    }\n\n    if (this.state.eready) {\n      partButton = <button id=\"pready\" onClick={this.participantReady} className=\"btn btn-lg btn-info btn-block\" type=\"submit\">Participant Ready</button>;\n    }\n    else {\n      partButton = \"\";\n    }\n\n    return (\n      <div className=\"login text-center\">\n        <div className=\"form-signin\">\n          <img className=\"mb-4 smash_logo\" src={SmashLab} alt=\"Smash Lab\" />\n          <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\n\n          {/* Experimenter Input Group */}\n          <div className=\"input-group mb-2\">\n            <input onChange={this.handleChange} type=\"text\" name=\"enum\" id=\"inputEnum\" className=\"form-control\" placeholder=\"Experimenter number\" value={this.state.enum} required autoFocus />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleExperimenterConsent} type=\"checkbox\" value=\"econsent\" checked={this.state.econsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {/* Participant Input Group */}\n          <div className=\"input-group mb-3\">\n            <input onChange={this.handleChange} type=\"text\" name=\"pnum\" id=\"inputPnum\" className=\"form-control\" placeholder=\"Participant Number\" value={this.state.pnum} required />\n            <div className=\"input-group-append\">\n              <div className=\"input-group-text\">\n                <input className=\"mr-1\" onChange={this.handleParticipantConsent} type=\"checkbox\" value=\"pconsent\" checked={this.state.pconsent} /> consent\n              </div>\n            </div>\n          </div>\n\n          {expButton}\n          {partButton}\n        </div>\n      </div>\n     );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Questions.css\";\n\nimport { getCurrentTime, playSound, logData } from \"../helpers\";\n\n\nclass Questions extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      step: 0,\n      edit: false\n    };\n  }\n\n  handleChange = (index, event) => {\n    // Update questions\n    let items = [...this.state.questions];\n    items[index] = event.target.value;\n\n    this.setState({\n      questions: items\n    });\n  }\n\n  handleClick = (index, event) => {\n    var question = this.props.procedure[this.props.step].questions[index][0];\n    var answer = this.props.procedure[this.props.step].questions[index][1];\n\n    // Play sound of answer\n    playSound(answer);\n\n    // Insert data to database (i.e. log data)\n    var timeElapsed = getCurrentTime();\n    var data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: `Q${index + 1}: ${question}`};\n    logData(data);\n  }\n\n  reminder = () => {\n    // Remind user to vocalize their actions\n    playSound(\"Please remember to describe what you are doing as you perform each step.\");\n\n    // Log reminder clicked\n    var timeElapsed = getCurrentTime();\n    var data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: \"Reminder clicked!\"};\n    logData(data);\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  render() {\n\n    // Wait for procedure to load\n    var procedure = [];\n    if (this.props.procedure.length > 0) {\n      procedure = this.props.procedure[this.props.step].questions.slice(0, 4);\n    }\n\n    return (\n      <div className=\"container full-height mt-2\">\n        <h2 className=\"text-center\">Questions</h2>\n        <hr/>\n\n        {/* Questions */}\n        <div className=\"list-group\">\n          {procedure.map((step, i) =>\n            <button key={i} onClick={this.handleClick.bind(this, i)} type=\"button\" className=\"btn btn-light btn-block question\">Q{i + 1}: {step[0]}</button>\n          )}\n        </div>\n        \n        {/* Reminder Button */}\n        <div className=\"container text-center mt-5\">\n              <button type=\"button\" onClick={this.recordTime} className=\"btn shadow ml-3 btn-dark btn-lg light-border\">\n                <i className=\"fa fa-bell\" aria-hidden=\"true\"></i>\n                <span onClick={this.reminder} className=\"ml-2\">Reminder</span>\n              </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Questions;","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport \"./Audio.css\";\n\nclass Audio extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"fixed-bottom ml-3 mb-3\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-xs-6\">\n              <button className=\"btn btn-light\">\n                <svg className=\"bi bi-mic-fill\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill={this.props.recording ? \"green\" : \"currentColor\"} d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\"/>\n                  <path fillRule=\"evenodd\" d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"/>\n                </svg>\n              </button>\n            </div>\n            <div className=\"col-xs-6 ml-3\">\n              <canvas className=\"visualizer\"></canvas>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Audio;","var mediaRecorder = {};\nvar chunks = [];\n\nexport function startAudioRecording() {\n  // Ensure getUserMedia is supported\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n    navigator.mediaDevices.getUserMedia (\n      {\n        audio: true\n      })\n\n      // Success callback, start recording\n      .then((stream) => startRecording(stream))\n\n      // Error callback\n      .catch(function(err) {\n        console.log('The following getUserMedia error occured: ' + err);\n      }\n    );\n  } else {\n    console.log('getUserMedia not supported on your browser!');\n  }\n}\n\nfunction startRecording(stream) {\n    // Start recording\n    mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.start(10);\n\n    // Start visualizing audio\n    // visualize(stream);\n\n    console.log(\"recorder started\");\n\n    mediaRecorder.ondataavailable = function(e) {\n      chunks.push(e.data);\n    }\n}\n\nexport function stopAudioRecording(filename) {\n  // Stop recording\n  mediaRecorder.stop();\n  console.log(mediaRecorder.state);\n  console.log(\"recorder stopped\");\n  mediaRecorder.onstop = (e) => stopRecording(e, filename);\n}\n\nfunction stopRecording(e, filename) {\n  // Stop and save the recording\n  console.log(\"recorder onstopped\");\n  const blob = new Blob(chunks, { 'type' : 'audio/wav; codecs=0' });\n  \n  // Package the data\n  var fd = new FormData();\n  fd.append(\"filename\", filename)\n  fd.append(\"pnum\", localStorage.getItem(\"currentPnum\"));\n  fd.append(\"audio\", blob);\n\n  // Send audio blob to server\n  fetch('/api/audio', {\n    method: 'POST',\n    body: fd,\n  })\n  .then(response => response.json())\n  .then(result => {\n    // Print result\n    console.log(result);\n  });\n\n  /*\n  // Format data to send to server (using base64 encoding)\n  var reader = new FileReader();\n  reader.readAsDataURL(blob);\n  reader.onload = function(event) {\n    var base64AudioMessage = event.target.result.split(',')[1];\n\n    // Send audio blob to server\n    fetch('/api/audio', {\n      method: 'POST',\n      body: JSON.stringify({\n        filename: 'hello.wav',\n        audiostring: base64AudioMessage\n      }),\n      headers: new Headers({ 'content-type': 'application/json' })\n    })\n    .then(response => response.json())\n    .then(result => {\n      // Print result\n      console.log(result);\n    });\n  }\n  */\n\n  chunks = [];\n\n  /*\n  const clipName = prompt('Enter a name for your sound clip');\n\n  const clipContainer = document.createElement('article');\n  const clipLabel = document.createElement('p');\n  const audio = document.createElement('audio');\n  const deleteButton = document.createElement('button');\n    \n  const soundClips = document.querySelector('.sound-clips');    \n\n  clipContainer.classList.add('clip');\n  audio.setAttribute('controls', '');\n  deleteButton.innerHTML = \"Delete\";\n  clipLabel.innerHTML = clipName;\n\n  clipContainer.appendChild(audio);\n  clipContainer.appendChild(clipLabel);\n  clipContainer.appendChild(deleteButton);\n  soundClips.appendChild(clipContainer);\n\n  audio.controls = true;\n  const blob = new Blob(chunks, { 'type' : 'audio/wav;' });\n  \n  chunks = [];\n  const audioURL = window.URL.createObjectURL(blob);\n  audio.src = audioURL;\n\n  deleteButton.onclick = function(e) {\n    let evtTgt = e.target;\n    evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n  }\n  */\n}\n\nfunction visualize(stream) {\n  // Visualize audio stream\n  const canvas = document.querySelector('.visualizer');\n  const canvasCtx = canvas.getContext(\"2d\");\n  let audioCtx;\n\n  if(!audioCtx) {\n    audioCtx = new AudioContext();\n  }\n\n  const source = audioCtx.createMediaStreamSource(stream);\n\n  const analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 2048;\n  const bufferLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n\n  source.connect(analyser);\n  //analyser.connect(audioCtx.destination);\n\n  draw()\n\n  function draw() {\n    const WIDTH = canvas.width\n    const HEIGHT = canvas.height;\n\n    requestAnimationFrame(draw);\n\n    analyser.getByteTimeDomainData(dataArray);\n\n    canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n\n    canvasCtx.beginPath();\n\n    let sliceWidth = WIDTH * 1.0 / bufferLength;\n    let x = 0;\n\n\n    for(let i = 0; i < bufferLength; i++) {\n\n      let v = dataArray[i] / 128.0;\n      let y = v * HEIGHT/2;\n\n      if(i === 0) {\n        canvasCtx.moveTo(x, y);\n      } else {\n        canvasCtx.lineTo(x, y);\n      }\n\n      x += sliceWidth;\n    }\n\n    canvasCtx.lineTo(canvas.width, canvas.height/2);\n    canvasCtx.stroke();\n\n  }\n}\n\n  // Convert an AudioBuffer to a Blob using WAVE representation\n  // https://www.russellgood.com/how-to-convert-audiobuffer-to-audio-file/\n  function bufferToWave(abuffer, len) {\n    var numOfChan = abuffer.numberOfChannels,\n        length = len * numOfChan * 2 + 44,\n        buffer = new ArrayBuffer(length),\n        view = new DataView(buffer),\n        channels = [], i, sample,\n        offset = 0,\n        pos = 0;\n\n    // write WAVE header\n    setUint32(0x46464952);                         // \"RIFF\"\n    setUint32(length - 8);                         // file length - 8\n    setUint32(0x45564157);                         // \"WAVE\"\n\n    setUint32(0x20746d66);                         // \"fmt \" chunk\n    setUint32(16);                                 // length = 16\n    setUint16(1);                                  // PCM (uncompressed)\n    setUint16(numOfChan);\n    setUint32(abuffer.sampleRate);\n    setUint32(abuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\n    setUint16(numOfChan * 2);                      // block-align\n    setUint16(16);                                 // 16-bit (hardcoded in this demo)\n\n    setUint32(0x61746164);                         // \"data\" - chunk\n    setUint32(length - pos - 4);                   // chunk length\n\n    // write interleaved data\n    for(i = 0; i < abuffer.numberOfChannels; i++)\n    channels.push(abuffer.getChannelData(i));\n\n    while(pos < length) {\n    for(i = 0; i < numOfChan; i++) {             // interleave channels\n        sample = Math.max(-1, Math.min(1, channels[i][offset])); // clamp\n        sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767)|0; // scale to 16-bit signed int\n        view.setInt16(pos, sample, true);          // write 16-bit sample\n        pos += 2;\n    }\n    offset++                                     // next source sample\n    }\n\n    // create Blob\n    return new Blob([buffer], {type: \"audio/wav\"});\n\n    function setUint16(data) {\n    view.setUint16(pos, data, true);\n    pos += 2;\n    }\n\n    function setUint32(data) {\n    view.setUint32(pos, data, true);\n    pos += 4;\n    }\n}\n","import React, { Component } from \"react\";\nimport Audio from \"../Audio/Audio\"\nimport \"../../App.css\";\nimport \"./Procedure.css\";\nimport { getCurrentTime, playSound, logData } from \"../helpers\";\nimport { startAudioRecording, stopAudioRecording } from \"../audio\";\n\nclass Procedure extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      ended: false,\n      edit: false,\n    };\n  }\n\n  inputChange = (index, event) => {\n    // Update procedure\n    let items = [...this.props.procedure];\n    items[index] = event.target.value;\n\n    this.setState({\n      procedure: items\n    });\n  }\n\n  procedureClick = (index, event) => {\n    // Update step\n    this.props.updateStep(index);\n\n    // Play sound\n    playSound(this.props.procedure[index].procedure);\n\n    // Insert data to database (i.e log data)\n    var timeElapsed = getCurrentTime();\n    var data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: `P${this.props.step + 1}: ${this.props.procedure[this.props.step].procedure}`};\n    logData(data);\n  }\n\n  setEditMode = () => {\n    this.setState({\n      edit: true\n    })\n  }\n\n  repeat = () => {\n    // Repeat sound\n    playSound(this.props.procedure[this.props.step].procedure);\n\n    // Log reminder clicked\n    var timeElapsed = getCurrentTime();\n    var data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: \"Procedure Repeated!\"};\n    logData(data);\n  }\n\n  export = () => {\n    // Export data\n    fetch('/api/export', {\n      method: 'POST',\n      body: JSON.stringify({\n        pnum: localStorage.getItem('currentPnum')\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(response => response.blob())\n    .then(blob => {\n      // Download Zip file\n      var url = window.URL.createObjectURL(blob);\n      var a = document.createElement('a');\n      a.href = url;\n      a.download = `${localStorage.getItem('currentPnum')}.zip`;\n      document.body.appendChild(a); \n      a.click();    \n      a.remove();  \n    });\n  } \n\n  done = () => {\n    var length = this.props.procedure.length;\n    if (this.state.started) {\n      if (this.props.step + 1 < length) {\n        // Play sound of procedure\n        playSound(this.props.procedure[(this.props.step + 1) % length].procedure);\n\n        // Insert data to database (i.e log data)\n        let timeElapsed = getCurrentTime();\n        let data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: `P${this.props.step + 1}: ${this.props.procedure[this.props.step].procedure}`};\n        logData(data);\n\n        // Update step\n        this.props.incrementStep();\n      }\n      else {\n        // Procedure has ended\n        this.setState({\n          ended: true\n        })\n\n        // Log end to database\n        let timeElapsed = getCurrentTime();\n        let data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: \"Procedure has ended!\"};\n        logData(data);\n      }\n    }\n    else {\n      this.setState({\n        started: true\n      })\n      \n      // Log start to database\n      let timeElapsed = getCurrentTime();\n      let data = {pnum: localStorage.getItem(\"currentPnum\"), timestamp: timeElapsed, action: \"Procedure has started!\"};\n      logData(data);\n\n      playSound(this.props.procedure[(this.props.step) % length].procedure);\n    }\n\n    // Stop recording\n    if (this.state.started) {\n      // Determine filename\n      var filename = `${localStorage.getItem(\"currentPnum\")}-${this.props.step}`;\n      console.log(filename);\n      stopAudioRecording(filename);\n    }\n    if (this.props.step + 1 < length) {\n      startAudioRecording();\n    }\n  }\n  \n  render() {\n\n    var card_title = undefined;\n    var card_body = undefined;\n    var card_button = undefined;\n    if (this.state.ended) {\n      card_title =  <h5 className=\"card-title\">Finish:</h5>;\n      card_body = <p id=\"step\" className=\"card-text\"> Push <b>Finished</b> to download data</p>;\n      card_button = <button type=\"button\" onClick={this.export} className=\"shadow btn ml-4 btn-secondary btn-lg dark-border\"><i className=\"fa fa-download\" aria-hidden=\"true\"></i><span className=\"ml-2\">Finished</span></button>;\n    }\n    else if (this.state.started) {\n      card_title = <h5 className=\"card-title\">Step {this.props.step}:</h5>;\n      card_body = <p id=\"step\" className=\"card-text\"> {this.props.procedure[this.props.step].procedure} </p>;\n      card_button = <button type=\"button\" onClick={this.done} className=\"shadow btn ml-4 btn-secondary btn-lg dark-border\">Done</button>;\n    }\n    else {\n      card_title = <h5 className=\"card-title\">Introduction:</h5>;\n      card_body = <p id=\"step\" className=\"card-text\"> Push <b>Next</b> to begin the procedure recording </p>;\n      card_button = <button type=\"button\" onClick={this.done} className=\"shadow btn ml-4 btn-secondary btn-lg dark-border\"><i className=\"fa fa-play\" aria-hidden=\"true\"></i><span className=\"ml-2\">Next</span></button>;\n    }\n\n    return (\n      <div className=\"full-height mt-2\">\n        <h2 className=\"text-white text-center\">Procedure</h2>\n        <hr/>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"card mt-2\">\n                <div className=\"card-body text-center\">\n                  {card_title}\n                  <hr/>\n                  {card_body}\n                </div>\n              </div>\n              <div className=\"text-center mt-4\">\n                <button type=\"button\" onClick={this.repeat} className=\"shadow btn btn-secondary btn-lg dark-border\">Repeat</button>\n                {card_button}\n              </div>   \n            </div>\n            <div className=\"col-md-6\">\n              <ul className=\"list-group list-group-hover mt-2 mb-5 procedure-list\">\n                {this.props.procedure.map((step, i) => \n                  <li key={i} onClick={this.procedureClick.bind(this, i)} id={'l' + i} className={`list-group-item ${(this.props.step === i && this.state.started) ? 'active' : ''}`}>{step.procedure}</li>\n                )}\n              </ul>            \n            </div>\n          </div>\n        </div>\n        <Audio recording={this.state.started}></Audio>\n      </div>\n    );\n  }\n}\n\nexport default Procedure;","import React, { Component } from \"react\";\nimport Questions from '../Questions/Questions'\nimport Procedure from '../Procedure/Procedure'\nimport './Home.css';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      procedure: [], \n      step: 0\n    }\n  }\n\n  getProcedure = () => {\n    // Get a list of procedures\n    fetch('/api/procedure')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        procedure: data\n      });\n    })\n  }\n\n  updateStep = (step) => {\n    this.setState({\n      step: step\n    })\n  }\n\n  incrementStep = () => {\n    this.setState({\n      step: (this.state.step + 1) % this.state.procedure.length\n    });\n  }\n\n  componentDidMount() {\n    // Get procedure\n    this.getProcedure();\n  }\n\n  render() {    \n    return (\n      <div>\n        {/* Left pane (Procedure section) */}\n        <div className=\"bg-dark split left\">\n          <div>\n            <Procedure incrementStep={this.incrementStep} \n                        updateStep={this.updateStep} \n                        step={this.state.step} \n                        procedure={this.state.procedure} \n                        pnum={this.props.pnum}>\n            </Procedure>\n          </div>\n        </div>\n\n        {/* Right pane (Questions sections) */}\n        <div className=\"bg-light split right\">\n          <div>\n            <Questions incrementStep={this.incrementStep} \n                        updateStep={this.updateStep} \n                        step={this.state.step} \n                        procedure={this.state.procedure} \n                        pnum={this.props.pnum}>\n            </Questions>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport Login from './Components/Login/Login'\nimport Home from './Components/Home/Home'\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './history';\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/Home\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}