{"ast":null,"code":"var mediaRecorder = {};\nvar chunks = [];\nexport function insertToDatabase(db, table, data) {\n  var transaction = db.transaction([table], \"readwrite\");\n\n  transaction.oncomplete = function (event) {\n    console.log(\"All done!\");\n  };\n\n  transaction.onerror = function (event) {\n    // Generic error handler for all errors targeted at this database's request\n    console.error(\"Database error: \" + event.target.errorCode);\n  };\n\n  var objectStore = transaction.objectStore(table);\n  var request = objectStore.add(data);\n\n  request.onsuccess = function (event) {};\n}\nexport function databaseGetAll(db) {\n  var transaction = db.transaction('log', 'readonly');\n  var objectStore = transaction.objectStore('log');\n\n  objectStore.getAll().onsuccess = function (event) {\n    return event.target.result;\n  };\n}\nexport function playSound(sound) {\n  var msg = new SpeechSynthesisUtterance(sound);\n  window.speechSynthesis.speak(msg);\n}\nexport function formatEpoch(seconds) {\n  var date = new Date(0);\n  date.setSeconds(seconds);\n  return date.toISOString().substr(11, 8);\n}\nexport function recordAudio() {\n  // Ensure getUserMedia is supported\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }) // Success callback, start recording\n    .then(stream => this.startRecording(stream)) // Error callback\n    .catch(function (err) {\n      console.log('The following getUserMedia error occured: ' + err);\n    });\n  } else {\n    console.log('getUserMedia not supported on your browser!');\n  }\n}","map":{"version":3,"sources":["/Users/vascoxu/Desktop/smash/mohs/frontend/src/Components/helpers.js"],"names":["mediaRecorder","chunks","insertToDatabase","db","table","data","transaction","oncomplete","event","console","log","onerror","error","target","errorCode","objectStore","request","add","onsuccess","databaseGetAll","getAll","result","playSound","sound","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","formatEpoch","seconds","date","Date","setSeconds","toISOString","substr","recordAudio","navigator","mediaDevices","getUserMedia","audio","then","stream","startRecording","catch","err"],"mappings":"AAAA,IAAIA,aAAa,GAAG,EAApB;AACA,IAAIC,MAAM,GAAG,EAAb;AAEA,OAAO,SAASC,gBAAT,CAA0BC,EAA1B,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2C;AAChD,MAAIC,WAAW,GAAGH,EAAE,CAACG,WAAH,CAAe,CAACF,KAAD,CAAf,EAAwB,WAAxB,CAAlB;;AAEAE,EAAAA,WAAW,CAACC,UAAZ,GAAyB,UAASC,KAAT,EAAgB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,GAFD;;AAIAJ,EAAAA,WAAW,CAACK,OAAZ,GAAsB,UAASH,KAAT,EAAgB;AACpC;AACAC,IAAAA,OAAO,CAACG,KAAR,CAAc,qBAAqBJ,KAAK,CAACK,MAAN,CAAaC,SAAhD;AACD,GAHD;;AAKA,MAAIC,WAAW,GAAGT,WAAW,CAACS,WAAZ,CAAwBX,KAAxB,CAAlB;AACA,MAAIY,OAAO,GAAGD,WAAW,CAACE,GAAZ,CAAgBZ,IAAhB,CAAd;;AACAW,EAAAA,OAAO,CAACE,SAAR,GAAoB,UAASV,KAAT,EAAgB,CACnC,CADD;AAED;AAED,OAAO,SAASW,cAAT,CAAwBhB,EAAxB,EAA4B;AACjC,MAAIG,WAAW,GAAGH,EAAE,CAACG,WAAH,CAAe,KAAf,EAAsB,UAAtB,CAAlB;AACA,MAAIS,WAAW,GAAGT,WAAW,CAACS,WAAZ,CAAwB,KAAxB,CAAlB;;AACAA,EAAAA,WAAW,CAACK,MAAZ,GAAqBF,SAArB,GAAiC,UAASV,KAAT,EAAgB;AAC/C,WAAOA,KAAK,CAACK,MAAN,CAAaQ,MAApB;AACD,GAFD;AAGD;AAED,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,MAAIC,GAAG,GAAG,IAAIC,wBAAJ,CAA6BF,KAA7B,CAAV;AACAG,EAAAA,MAAM,CAACC,eAAP,CAAuBC,KAAvB,CAA6BJ,GAA7B;AACD;AAED,OAAO,SAASK,WAAT,CAAqBC,OAArB,EAA8B;AACnC,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAT,CAAX;AACAD,EAAAA,IAAI,CAACE,UAAL,CAAgBH,OAAhB;AACA,SAAOC,IAAI,CAACG,WAAL,GAAmBC,MAAnB,CAA0B,EAA1B,EAA8B,CAA9B,CAAP;AACD;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5B;AACA,MAAIC,SAAS,CAACC,YAAV,IAA0BD,SAAS,CAACC,YAAV,CAAuBC,YAArD,EAAmE;AACjE9B,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA2B,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CACE;AACEC,MAAAA,KAAK,EAAE;AADT,KADF,EAKE;AALF,KAMGC,IANH,CAMSC,MAAD,IAAY,KAAKC,cAAL,CAAoBD,MAApB,CANpB,EAQE;AARF,KASGE,KATH,CASS,UAASC,GAAT,EAAc;AACnBpC,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAA+CmC,GAA3D;AACD,KAXH;AAaD,GAfD,MAeO;AACLpC,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACD;AACF","sourcesContent":["var mediaRecorder = {};\nvar chunks = [];\n\nexport function insertToDatabase(db, table, data) {\n  var transaction = db.transaction([table], \"readwrite\");\n\n  transaction.oncomplete = function(event) {\n    console.log(\"All done!\");\n  };\n\n  transaction.onerror = function(event) {\n    // Generic error handler for all errors targeted at this database's request\n    console.error(\"Database error: \" + event.target.errorCode);    \n  };\n\n  var objectStore = transaction.objectStore(table);\n  var request = objectStore.add(data);\n  request.onsuccess = function(event) {\n  }\n}\n\nexport function databaseGetAll(db) {\n  var transaction = db.transaction('log', 'readonly');\n  var objectStore = transaction.objectStore('log');\n  objectStore.getAll().onsuccess = function(event) {\n    return event.target.result\n  };\n}\n\nexport function playSound(sound) {\n  var msg = new SpeechSynthesisUtterance(sound);\n  window.speechSynthesis.speak(msg);\n}\n\nexport function formatEpoch(seconds) {\n  var date = new Date(0);\n  date.setSeconds(seconds);\n  return date.toISOString().substr(11, 8);\n}\n\nexport function recordAudio() {\n  // Ensure getUserMedia is supported\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n    navigator.mediaDevices.getUserMedia (\n      {\n        audio: true\n      })\n\n      // Success callback, start recording\n      .then((stream) => this.startRecording(stream))\n\n      // Error callback\n      .catch(function(err) {\n        console.log('The following getUserMedia error occured: ' + err);\n      }\n    );\n  } else {\n    console.log('getUserMedia not supported on your browser!');\n  }\n}"]},"metadata":{},"sourceType":"module"}