{"ast":null,"code":"var _jsxFileName = \"/Users/vascoxu/Desktop/smash/mohs/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport Login from './Components/Login/Login';\nimport Home from './Components/Home/Home';\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './history';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    // Open IndexedDB database\n    var request = window.indexedDB.open(\"mohs\", 3);\n\n    request.onerror = function (event) {\n      // Generic error handler for all errors targeted at this database's\n      // requests!\n      console.error(\"Database error: \" + event.target.errorCode);\n    };\n\n    request.onupgradeneeded = function (event) {\n      var db = event.target.result; // Create an objectStore to create a log file\n\n      var objectStore = db.createObjectStore(\"customers\", {\n        keyPath: \"ssn\"\n      }); // Create an index to search customers by name. We may have duplicates\n      // so we can't use a unique index.\n\n      objectStore.createIndex(\"name\", \"name\", {\n        unique: false\n      }); // Create an index to search customers by email. We want to ensure that\n      // no two customers have the same email, so use a unique index.\n\n      objectStore.createIndex(\"email\", \"email\", {\n        unique: true\n      }); // Use transaction oncomplete to make sure the objectStore creation is \n      // finished before adding data into it.\n\n      objectStore.transaction.oncomplete = function (event) {\n        // Store values in the newly created objectStore.\n        var customerObjectStore = db.transaction(\"customers\", \"readwrite\").objectStore(\"customers\");\n        customerData.forEach(function (customer) {\n          customerObjectStore.add(customer);\n        });\n      };\n    };\n\n    return /*#__PURE__*/React.createElement(Router, {\n      history: history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/Home\",\n      component: Home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vascoxu/Desktop/smash/mohs/frontend/src/App.js"],"names":["React","Component","Login","Home","Router","Switch","Route","history","App","constructor","props","render","request","window","indexedDB","open","onerror","event","console","error","target","errorCode","onupgradeneeded","db","result","objectStore","createObjectStore","keyPath","createIndex","unique","transaction","oncomplete","customerObjectStore","customerData","forEach","customer","add"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,QAAsC,kBAAtC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAE1BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAEP;AACA,QAAIC,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,MAAtB,EAA8B,CAA9B,CAAd;;AAEAH,IAAAA,OAAO,CAACI,OAAR,GAAkB,UAASC,KAAT,EAAgB;AAChC;AACA;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAc,qBAAqBF,KAAK,CAACG,MAAN,CAAaC,SAAhD;AACD,KAJD;;AAMAT,IAAAA,OAAO,CAACU,eAAR,GAA0B,UAASL,KAAT,EAAgB;AACxC,UAAIM,EAAE,GAAGN,KAAK,CAACG,MAAN,CAAaI,MAAtB,CADwC,CAGxC;;AACA,UAAIC,WAAW,GAAGF,EAAE,CAACG,iBAAH,CAAqB,WAArB,EAAkC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAlC,CAAlB,CAJwC,CAMxC;AACA;;AACAF,MAAAA,WAAW,CAACG,WAAZ,CAAwB,MAAxB,EAAgC,MAAhC,EAAwC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAxC,EARwC,CAUxC;AACA;;AACAJ,MAAAA,WAAW,CAACG,WAAZ,CAAwB,OAAxB,EAAiC,OAAjC,EAA0C;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAA1C,EAZwC,CAcxC;AACA;;AACAJ,MAAAA,WAAW,CAACK,WAAZ,CAAwBC,UAAxB,GAAqC,UAASd,KAAT,EAAgB;AACnD;AACA,YAAIe,mBAAmB,GAAGT,EAAE,CAACO,WAAH,CAAe,WAAf,EAA4B,WAA5B,EAAyCL,WAAzC,CAAqD,WAArD,CAA1B;AACAQ,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAASC,QAAT,EAAmB;AACtCH,UAAAA,mBAAmB,CAACI,GAApB,CAAwBD,QAAxB;AACD,SAFD;AAGD,OAND;AAOD,KAvBD;;AAyBA,wBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE5B,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,KAAK,MAArB;AAAsB,MAAA,SAAS,EAAEL,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF;AAQD;;AAlDyB;;AAqD5B,eAAeK,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Login from './Components/Login/Login'\nimport Home from './Components/Home/Home'\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './history';\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    // Open IndexedDB database\n    var request = window.indexedDB.open(\"mohs\", 3);\n\n    request.onerror = function(event) {\n      // Generic error handler for all errors targeted at this database's\n      // requests!\n      console.error(\"Database error: \" + event.target.errorCode);\n    };\n\n    request.onupgradeneeded = function(event) {\n      var db = event.target.result;\n    \n      // Create an objectStore to create a log file\n      var objectStore = db.createObjectStore(\"customers\", { keyPath: \"ssn\" });\n    \n      // Create an index to search customers by name. We may have duplicates\n      // so we can't use a unique index.\n      objectStore.createIndex(\"name\", \"name\", { unique: false });\n    \n      // Create an index to search customers by email. We want to ensure that\n      // no two customers have the same email, so use a unique index.\n      objectStore.createIndex(\"email\", \"email\", { unique: true });\n    \n      // Use transaction oncomplete to make sure the objectStore creation is \n      // finished before adding data into it.\n      objectStore.transaction.oncomplete = function(event) {\n        // Store values in the newly created objectStore.\n        var customerObjectStore = db.transaction(\"customers\", \"readwrite\").objectStore(\"customers\");\n        customerData.forEach(function(customer) {\n          customerObjectStore.add(customer);\n        });\n      };\n    };\n\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/Home\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}